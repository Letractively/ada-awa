-----------------------------------------------------------------------
--  AWA.Storages.Models -- AWA.Storages.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2011 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
package body AWA.Storages.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;

   function Storage_Data_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORAGE_DATA_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Data_Key;

   function Storage_Data_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORAGE_DATA_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Data_Key;

   function "=" (Left, Right : Storage_Data_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Storage_Data_Ref'Class;
                        Impl   : out Storage_Data_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Storage_Data_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Storage_Data_Ref) is
      Impl : Storage_Data_Access;
   begin
      Impl := new Storage_Data_Impl;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Storage_Data
   -- ----------------------------------------

   procedure Set_Id (Object : in out Storage_Data_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Storage_Data_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Storage_Data_Ref)
                  return ADO.Identifier is
      Impl : constant Storage_Data_Access := Storage_Data_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Storage_Data_Ref)
                  return Integer is
      Impl : constant Storage_Data_Access := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Data (Object : in out Storage_Data_Ref;
                       Value  : in ADO.Blob_Ref) is
      Impl : Storage_Data_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Blob (Impl.all, 3, Impl.Data, Value);
   end Set_Data;

   function Get_Data (Object : in Storage_Data_Ref)
                  return ADO.Blob_Ref is
      Impl : constant Storage_Data_Access := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Data;
   end Get_Data;

   --  Copy of the object.
   procedure Copy (Object : in Storage_Data_Ref;
                   Into   : in out Storage_Data_Ref) is
      Result : Storage_Data_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Storage_Data_Access
              := Storage_Data_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Storage_Data_Access
              := new Storage_Data_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Data := Impl.Data;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Storage_Data_Access := new Storage_Data_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Storage_Data_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Storage_Data_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Storage_Data_Impl) is
      type Storage_Data_Impl_Ptr is access all Storage_Data_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Storage_Data_Impl, Storage_Data_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Storage_Data_Impl_Ptr := Storage_Data_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (STORAGE_DATA_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORAGE_DATA_TABLE'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  data
                          Value => Object.Data);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORAGE_DATA_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  data
                        Value => Object.Data);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORAGE_DATA_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (Item : in Storage_Data_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := Item.Get_Load_Object;
      Impl : access Storage_Data_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Storage_Data_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Storage_Data_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Data := Stmt.Get_Blob (2);
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Storage_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORAGE_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Key;

   function Storage_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORAGE_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Storage_Key;

   function "=" (Left, Right : Storage_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Storage_Ref'Class;
                        Impl   : out Storage_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Storage_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Storage_Ref) is
      Impl : Storage_Access;
   begin
      Impl := new Storage_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Storage := Storage_Type'First;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Storage
   -- ----------------------------------------

   procedure Set_Id (Object : in out Storage_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Storage_Ref)
                  return ADO.Identifier is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Storage_Ref)
                  return Integer is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Create_Date (Object : in out Storage_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 3, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Storage_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Storage (Object : in out Storage_Ref;
                          Value  : in Storage_Type) is
      procedure Set_Field_Enum is
         new ADO.Objects.Set_Field_Operation (Storage_Type);
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Enum (Impl.all, 4, Impl.Storage, Value);
   end Set_Storage;

   function Get_Storage (Object : in Storage_Ref)
                  return Storage_Type is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Storage;
   end Get_Storage;


   procedure Set_Data (Object : in out Storage_Ref;
                        Value : in String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Data, Value);
   end Set_Data;

   procedure Set_Data (Object : in out Storage_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Data, Value);
   end Set_Data;

   function Get_Data (Object : in Storage_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Data);
   end Get_Data;
   function Get_Data (Object : in Storage_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Data;
   end Get_Data;


   procedure Set_Store_Data (Object : in out Storage_Ref;
                             Value  : in Storage_Data_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.Store_Data, Value);
   end Set_Store_Data;

   function Get_Store_Data (Object : in Storage_Ref)
                  return Storage_Data_Ref'Class is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Store_Data;
   end Get_Store_Data;


   procedure Set_Workspace (Object : in out Storage_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Storage_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 7, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Storage_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Storage_Access := Storage_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;

   --  Copy of the object.
   procedure Copy (Object : in Storage_Ref;
                   Into   : in out Storage_Ref) is
      Result : Storage_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Storage_Access
              := Storage_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Storage_Access
              := new Storage_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Storage := Impl.Storage;
            Copy.Data := Impl.Data;
            Copy.Store_Data := Impl.Store_Data;
            Copy.Workspace := Impl.Workspace;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Storage_Access := new Storage_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Storage_Access := new Storage_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Storage_Access := new Storage_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Storage_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Storage_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Storage_Impl) is
      type Storage_Impl_Ptr is access all Storage_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Storage_Impl, Storage_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Storage_Impl_Ptr := Storage_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (STORAGE_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORAGE_TABLE'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  storage_type
                          Value => Integer (Storage_Type'Pos (Object.Storage)));
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  data
                          Value => Object.Data);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  storage_id
                          Value => Object.Store_Data);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (7);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORAGE_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_3_2_NAME, --  storage_type
                        Value => Integer (Storage_Type'Pos (Object.Storage)));
      Query.Save_Field (Name  => COL_4_2_NAME, --  data
                        Value => Object.Data);
      Query.Save_Field (Name  => COL_5_2_NAME, --  storage_id
                        Value => Object.Store_Data);
      Query.Save_Field (Name  => COL_6_2_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORAGE_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (Item : in Storage_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := Item.Get_Load_Object;
      Impl : access Storage_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Storage_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      end if;
      if Name = "storage" then
         return Storage_Type_Objects.To_Object (Impl.Storage);
      end if;
      if Name = "data" then
         return Util.Beans.Objects.To_Object (Impl.Data);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Storage_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (2);
      Object.Storage := Storage_Type'Val (Stmt.Get_Identifier (3));
      Object.Storage := Storage_Type'Val (Stmt.Get_Integer (3));
      Object.Data := Stmt.Get_Unbounded_String (4);
      if not Stmt.Is_Null (5) then
         Object.Store_Data.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      if not Stmt.Is_Null (6) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Store_Local_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORE_LOCAL_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Local_Key;

   function Store_Local_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => STORE_LOCAL_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Local_Key;

   function "=" (Left, Right : Store_Local_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Store_Local_Ref'Class;
                        Impl   : out Store_Local_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Store_Local_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Store_Local_Ref) is
      Impl : Store_Local_Access;
   begin
      Impl := new Store_Local_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Expire_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Store_Local
   -- ----------------------------------------

   procedure Set_Id (Object : in out Store_Local_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Store_Local_Ref)
                  return ADO.Identifier is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Store_Local_Ref)
                  return Integer is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Create_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 3, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Store_Local_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Expire_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 4, Impl.Expire_Date, Value);
   end Set_Expire_Date;

   function Get_Expire_Date (Object : in Store_Local_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Expire_Date;
   end Get_Expire_Date;


   procedure Set_Path (Object : in out Store_Local_Ref;
                        Value : in String) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Path, Value);
   end Set_Path;

   procedure Set_Path (Object : in out Store_Local_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Path, Value);
   end Set_Path;

   function Get_Path (Object : in Store_Local_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Path);
   end Get_Path;
   function Get_Path (Object : in Store_Local_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Path;
   end Get_Path;


   procedure Set_Storage (Object : in out Store_Local_Ref;
                          Value  : in Storage_Ref'Class) is
      Impl : Store_Local_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.Storage, Value);
   end Set_Storage;

   function Get_Storage (Object : in Store_Local_Ref)
                  return Storage_Ref'Class is
      Impl : constant Store_Local_Access := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Storage;
   end Get_Storage;

   --  Copy of the object.
   procedure Copy (Object : in Store_Local_Ref;
                   Into   : in out Store_Local_Ref) is
      Result : Store_Local_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Store_Local_Access
              := Store_Local_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Store_Local_Access
              := new Store_Local_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Expire_Date := Impl.Expire_Date;
            Copy.Path := Impl.Path;
            Copy.Storage := Impl.Storage;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Store_Local_Access := new Store_Local_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Store_Local_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Store_Local_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Store_Local_Impl) is
      type Store_Local_Impl_Ptr is access all Store_Local_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Store_Local_Impl, Store_Local_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Store_Local_Impl_Ptr := Store_Local_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (STORE_LOCAL_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORE_LOCAL_TABLE'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_3_NAME, --  expire_date
                          Value => Object.Expire_Date);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_3_NAME, --  name
                          Value => Object.Path);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_3_NAME, --  storage_id
                          Value => Object.Storage);
         Object.Clear_Modified (6);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORE_LOCAL_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_3_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_3_3_NAME, --  expire_date
                        Value => Object.Expire_Date);
      Query.Save_Field (Name  => COL_4_3_NAME, --  name
                        Value => Object.Path);
      Query.Save_Field (Name  => COL_5_3_NAME, --  storage_id
                        Value => Object.Storage);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORE_LOCAL_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (Item : in Store_Local_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := Item.Get_Load_Object;
      Impl : access Store_Local_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Store_Local_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      end if;
      if Name = "expire_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Expire_Date);
      end if;
      if Name = "path" then
         return Util.Beans.Objects.To_Object (Impl.Path);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Store_Local_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (2);
      Object.Expire_Date := Stmt.Get_Time (3);
      Object.Path := Stmt.Get_Unbounded_String (4);
      if not Stmt.Is_Null (5) then
         Object.Storage.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;

end AWA.Storages.Models;
