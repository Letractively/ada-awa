-----------------------------------------------------------------------
--  AWA.Storages.Models -- AWA.Storages.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 395
-----------------------------------------------------------------------
--  Copyright (C) 2012 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off, "unit * is not referenced");
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with ADO.Queries;
with ADO.Queries.Loaders;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Objects.Enums;
with Util.Beans.Basic.Lists;
with AWA.Users.Models;
with AWA.Workspaces.Models;
pragma Warnings (On, "unit * is not referenced");
package AWA.Storages.Models is
   type Storage_Type is (DATABASE, FILE, TMP, URL);
   for Storage_Type use (DATABASE => 0, FILE => 1, TMP => 2, URL => 3);
   package Storage_Type_Objects is
      new Util.Beans.Objects.Enums (Storage_Type);

   --  --------------------
   --  The database storage data when the storage type is DATABASE.
   --  --------------------
   --  Create an object key for Storage_Data.
   function Storage_Data_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Storage_Data from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Storage_Data_Key (Id : in String) return ADO.Objects.Object_Key;

   type Storage_Data_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Storage_Data : constant Storage_Data_Ref;
   function "=" (Left, Right : Storage_Data_Ref'Class) return Boolean;

   --  Set the storage data identifier
   procedure Set_Id (Object : in out Storage_Data_Ref;
                     Value  : in ADO.Identifier);

   --  Get the storage data identifier
   function Get_Id (Object : in Storage_Data_Ref)
                 return ADO.Identifier;
   --  Get the storage data version.
   function Get_Version (Object : in Storage_Data_Ref)
                 return Integer;

   --  Set the storage data when the storage type is DATABASE.
   procedure Set_Data (Object : in out Storage_Data_Ref;
                       Value  : in ADO.Blob_Ref);

   --  Get the storage data when the storage type is DATABASE.
   function Get_Data (Object : in Storage_Data_Ref)
                 return ADO.Blob_Ref;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Storage_Data_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Storage_Data_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Storage_Data_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   STORAGE_DATA_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Data_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Storage_Data_Ref;
                   Into   : in out Storage_Data_Ref);

   --  --------------------
   --  Storage files are organized in folders.
   --  --------------------
   --  Create an object key for Storage_Folder.
   function Storage_Folder_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Storage_Folder from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Storage_Folder_Key (Id : in String) return ADO.Objects.Object_Key;

   type Storage_Folder_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Storage_Folder : constant Storage_Folder_Ref;
   function "=" (Left, Right : Storage_Folder_Ref'Class) return Boolean;

   --  Set the storage folder identifier
   procedure Set_Id (Object : in out Storage_Folder_Ref;
                     Value  : in ADO.Identifier);

   --  Get the storage folder identifier
   function Get_Id (Object : in Storage_Folder_Ref)
                 return ADO.Identifier;
   --  Get the storage folder version.
   function Get_Version (Object : in Storage_Folder_Ref)
                 return Integer;

   --  Set the storage folder name
   procedure Set_Name (Object : in out Storage_Folder_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Storage_Folder_Ref;
                       Value : in String);

   --  Get the storage folder name
   function Get_Name (Object : in Storage_Folder_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Storage_Folder_Ref)
                 return String;

   --  Set the folder creation date
   procedure Set_Create_Date (Object : in out Storage_Folder_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the folder creation date
   function Get_Create_Date (Object : in Storage_Folder_Ref)
                 return Ada.Calendar.Time;

   --  Set the workspace that this storage folder belongs to.
   procedure Set_Workspace (Object : in out Storage_Folder_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class);

   --  Get the workspace that this storage folder belongs to.
   function Get_Workspace (Object : in Storage_Folder_Ref)
                 return AWA.Workspaces.Models.Workspace_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Storage_Folder_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Storage_Folder_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Storage_Folder_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   STORAGE_FOLDER_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Folder_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Storage_Folder_Ref;
                   Into   : in out Storage_Folder_Ref);

   --  --------------------
   --  The database storage data when the storage type is DATABASE.
   --  --------------------
   --  Create an object key for Storage.
   function Storage_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Storage from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Storage_Key (Id : in String) return ADO.Objects.Object_Key;

   type Storage_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Storage : constant Storage_Ref;
   function "=" (Left, Right : Storage_Ref'Class) return Boolean;

   --  Set the storage identifier
   procedure Set_Id (Object : in out Storage_Ref;
                     Value  : in ADO.Identifier);

   --  Get the storage identifier
   function Get_Id (Object : in Storage_Ref)
                 return ADO.Identifier;
   --  Get the storage data version.
   function Get_Version (Object : in Storage_Ref)
                 return Integer;

   --  Set the local store creation date
   procedure Set_Create_Date (Object : in out Storage_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the local store creation date
   function Get_Create_Date (Object : in Storage_Ref)
                 return Ada.Calendar.Time;

   --  Set the storage type.
   procedure Set_Storage (Object : in out Storage_Ref;
                          Value  : in Storage_Type);

   --  Get the storage type.
   function Get_Storage (Object : in Storage_Ref)
                 return Storage_Type;

   --  Set the storage specific URI
   procedure Set_Uri (Object : in out Storage_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Uri (Object : in out Storage_Ref;
                      Value : in String);

   --  Get the storage specific URI
   function Get_Uri (Object : in Storage_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Uri (Object : in Storage_Ref)
                 return String;

   --  Set the storage name or filename
   procedure Set_Name (Object : in out Storage_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Storage_Ref;
                       Value : in String);

   --  Get the storage name or filename
   function Get_Name (Object : in Storage_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Storage_Ref)
                 return String;

   --  Set the content mime type
   procedure Set_Mime_Type (Object : in out Storage_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Mime_Type (Object : in out Storage_Ref;
                            Value : in String);

   --  Get the content mime type
   function Get_Mime_Type (Object : in Storage_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Mime_Type (Object : in Storage_Ref)
                 return String;

   --  Set the content size
   procedure Set_File_Size (Object : in out Storage_Ref;
                            Value  : in Integer);

   --  Get the content size
   function Get_File_Size (Object : in Storage_Ref)
                 return Integer;

   --  Set the storage that this local store refers to.
   procedure Set_Store_Data (Object : in out Storage_Ref;
                             Value  : in Storage_Data_Ref'Class);

   --  Get the storage that this local store refers to.
   function Get_Store_Data (Object : in Storage_Ref)
                 return Storage_Data_Ref'Class;

   --  Set the workspace that this storage belongs to.
   procedure Set_Workspace (Object : in out Storage_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class);

   --  Get the workspace that this storage belongs to.
   function Get_Workspace (Object : in Storage_Ref)
                 return AWA.Workspaces.Models.Workspace_Ref'Class;

   --  Set the storage folder that this storage belongs to.
   procedure Set_Folder (Object : in out Storage_Ref;
                         Value  : in Storage_Folder_Ref'Class);

   --  Get the storage folder that this storage belongs to.
   function Get_Folder (Object : in Storage_Ref)
                 return Storage_Folder_Ref'Class;

   --  Set the storage file owner (or user who uploaded the document).
   procedure Set_Owner (Object : in out Storage_Ref;
                        Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the storage file owner (or user who uploaded the document).
   function Get_Owner (Object : in Storage_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set the original storage file that this storage instance refers to.
   procedure Set_Original (Object : in out Storage_Ref;
                           Value  : in Storage_Ref'Class);

   --  Get the original storage file that this storage instance refers to.
   function Get_Original (Object : in Storage_Ref)
                 return Storage_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Storage_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Storage_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Storage_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   STORAGE_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Storage_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Storage_Ref;
                   Into   : in out Storage_Ref);

   --  --------------------
   --  The local store record is created when a copy of the data
   --  is needed on the local file system.  The creation date refers to the date when
   --  the data was copied on the local file system.  The expiration date indicates a
   --  date after which the local file can be removed from the local file system.
   --  --------------------
   --  Create an object key for Store_Local.
   function Store_Local_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Store_Local from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Store_Local_Key (Id : in String) return ADO.Objects.Object_Key;

   type Store_Local_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Store_Local : constant Store_Local_Ref;
   function "=" (Left, Right : Store_Local_Ref'Class) return Boolean;

   --  Set the local storage identifier
   procedure Set_Id (Object : in out Store_Local_Ref;
                     Value  : in ADO.Identifier);

   --  Get the local storage identifier
   function Get_Id (Object : in Store_Local_Ref)
                 return ADO.Identifier;
   --  Get the local storage version.
   function Get_Version (Object : in Store_Local_Ref)
                 return Integer;

   --  Set the local store creation date
   procedure Set_Create_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the local store creation date
   function Get_Create_Date (Object : in Store_Local_Ref)
                 return Ada.Calendar.Time;

   --  Set the local store expiration date
   procedure Set_Expire_Date (Object : in out Store_Local_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the local store expiration date
   function Get_Expire_Date (Object : in Store_Local_Ref)
                 return Ada.Calendar.Time;

   --  Set the local store path
   procedure Set_Path (Object : in out Store_Local_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Path (Object : in out Store_Local_Ref;
                       Value : in String);

   --  Get the local store path
   function Get_Path (Object : in Store_Local_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Path (Object : in Store_Local_Ref)
                 return String;

   --  Set the storage version that this local store represents
   procedure Set_Store_Version (Object : in out Store_Local_Ref;
                                Value  : in Integer);

   --  Get the storage version that this local store represents
   function Get_Store_Version (Object : in Store_Local_Ref)
                 return Integer;

   --  Set whether the local store file can be shared or not
   procedure Set_Shared (Object : in out Store_Local_Ref;
                         Value  : in Boolean);

   --  Get whether the local store file can be shared or not
   function Get_Shared (Object : in Store_Local_Ref)
                 return Boolean;

   --  Set the storage that this local store refers to.
   procedure Set_Storage (Object : in out Store_Local_Ref;
                          Value  : in Storage_Ref'Class);

   --  Get the storage that this local store refers to.
   function Get_Storage (Object : in Store_Local_Ref)
                 return Storage_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Store_Local_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Store_Local_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Store_Local_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   STORE_LOCAL_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Store_Local_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Store_Local_Ref;
                   Into   : in out Store_Local_Ref);



   Query_Storage_Get_Data : constant ADO.Queries.Query_Definition_Access;

   Query_Storage_Get_Local : constant ADO.Queries.Query_Definition_Access;

   Query_Storage_Get_Storage : constant ADO.Queries.Query_Definition_Access;

   Query_Storage_Delete_Local : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --  The list of folders.
   --  --------------------
   type Folder_Info is new Util.Beans.Basic.Readonly_Bean with record
      --  the folder identifier.
      Id : ADO.Identifier;

      --  the folder name.
      Name : Ada.Strings.Unbounded.Unbounded_String;

      --  the blog creation date.
      Create_Date : Ada.Calendar.Time;

   end record;

   --  Get the bean attribute identified by the given name.
   overriding
   function Get_Value (From : in Folder_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   package Folder_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Folder_Info);
   package Folder_Info_Vectors renames Folder_Info_Beans.Vectors;
   subtype Folder_Info_List_Bean is Folder_Info_Beans.List_Bean;

   type Folder_Info_List_Bean_Access is access all Folder_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Folder_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Folder_Info_Vector is Folder_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Folder_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Storage_Folder_List : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --  The list of documents for a given folder.
   --  --------------------
   type Storage_Info is new Util.Beans.Basic.Readonly_Bean with record
      --  the storage identifier.
      Id : ADO.Identifier;

      --  the file name.
      Name : Ada.Strings.Unbounded.Unbounded_String;

      --  the file creation date.
      Create_Date : Ada.Calendar.Time;

      --  the file storage URI.
      Uri : Ada.Strings.Unbounded.Unbounded_String;

      --  the file storage URI.
      Storage : Storage_Type;

      --  the file mime type.
      Mime_Type : Ada.Strings.Unbounded.Unbounded_String;

      --  the file size.
      File_Size : Integer;

      --  the user name who uploaded the document.
      User_Name : Ada.Strings.Unbounded.Unbounded_String;

   end record;

   --  Get the bean attribute identified by the given name.
   overriding
   function Get_Value (From : in Storage_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   package Storage_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => Storage_Info);
   package Storage_Info_Vectors renames Storage_Info_Beans.Vectors;
   subtype Storage_Info_List_Bean is Storage_Info_Beans.List_Bean;

   type Storage_Info_List_Bean_Access is access all Storage_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Storage_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype Storage_Info_Vector is Storage_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out Storage_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Storage_List : constant ADO.Queries.Query_Definition_Access;


private
   STORAGE_DATA_NAME : aliased constant String := "awa_storage_data";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "data";
   STORAGE_DATA_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 3,
      Table => STORAGE_DATA_NAME'Access,
      Members => (
         COL_0_1_NAME'Access,
         COL_1_1_NAME'Access,
         COL_2_1_NAME'Access
)
     );
   Null_Storage_Data : constant Storage_Data_Ref
      := Storage_Data_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Storage_Data_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => STORAGE_DATA_TABLE'Access)
   with record
       Version : Integer;
       Data : ADO.Blob_Ref;
   end record;
   type Storage_Data_Access is access all Storage_Data_Impl;
   overriding
   procedure Destroy (Object : access Storage_Data_Impl);
   overriding
   procedure Find (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Storage_Data_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Storage_Data_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Storage_Data_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Storage_Data_Ref'Class;
                        Impl   : out Storage_Data_Access);
   STORAGE_FOLDER_NAME : aliased constant String := "awa_storage_folder";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "name";
   COL_3_2_NAME : aliased constant String := "create_date";
   COL_4_2_NAME : aliased constant String := "workspace_id";
   STORAGE_FOLDER_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => STORAGE_FOLDER_NAME'Access,
      Members => (
         COL_0_2_NAME'Access,
         COL_1_2_NAME'Access,
         COL_2_2_NAME'Access,
         COL_3_2_NAME'Access,
         COL_4_2_NAME'Access
)
     );
   Null_Storage_Folder : constant Storage_Folder_Ref
      := Storage_Folder_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Storage_Folder_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => STORAGE_FOLDER_TABLE'Access)
   with record
       Version : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Workspace : AWA.Workspaces.Models.Workspace_Ref;
   end record;
   type Storage_Folder_Access is access all Storage_Folder_Impl;
   overriding
   procedure Destroy (Object : access Storage_Folder_Impl);
   overriding
   procedure Find (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Storage_Folder_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Storage_Folder_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Storage_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Storage_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Storage_Folder_Ref'Class;
                        Impl   : out Storage_Folder_Access);
   STORAGE_NAME : aliased constant String := "awa_storage";
   COL_0_3_NAME : aliased constant String := "id";
   COL_1_3_NAME : aliased constant String := "version";
   COL_2_3_NAME : aliased constant String := "create_date";
   COL_3_3_NAME : aliased constant String := "storage_type";
   COL_4_3_NAME : aliased constant String := "uri";
   COL_5_3_NAME : aliased constant String := "name";
   COL_6_3_NAME : aliased constant String := "mime_type";
   COL_7_3_NAME : aliased constant String := "file_size";
   COL_8_3_NAME : aliased constant String := "storage_id";
   COL_9_3_NAME : aliased constant String := "workspace_id";
   COL_10_3_NAME : aliased constant String := "folder_id";
   COL_11_3_NAME : aliased constant String := "owner_id";
   COL_12_3_NAME : aliased constant String := "original_id";
   STORAGE_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 13,
      Table => STORAGE_NAME'Access,
      Members => (
         COL_0_3_NAME'Access,
         COL_1_3_NAME'Access,
         COL_2_3_NAME'Access,
         COL_3_3_NAME'Access,
         COL_4_3_NAME'Access,
         COL_5_3_NAME'Access,
         COL_6_3_NAME'Access,
         COL_7_3_NAME'Access,
         COL_8_3_NAME'Access,
         COL_9_3_NAME'Access,
         COL_10_3_NAME'Access,
         COL_11_3_NAME'Access,
         COL_12_3_NAME'Access
)
     );
   Null_Storage : constant Storage_Ref
      := Storage_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Storage_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => STORAGE_TABLE'Access)
   with record
       Version : Integer;
       Create_Date : Ada.Calendar.Time;
       Storage : Storage_Type;
       Uri : Ada.Strings.Unbounded.Unbounded_String;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Mime_Type : Ada.Strings.Unbounded.Unbounded_String;
       File_Size : Integer;
       Store_Data : Storage_Data_Ref;
       Workspace : AWA.Workspaces.Models.Workspace_Ref;
       Folder : Storage_Folder_Ref;
       Owner : AWA.Users.Models.User_Ref;
       Original : Storage_Ref;
   end record;
   type Storage_Access is access all Storage_Impl;
   overriding
   procedure Destroy (Object : access Storage_Impl);
   overriding
   procedure Find (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Storage_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Storage_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Storage_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Storage_Ref'Class;
                        Impl   : out Storage_Access);
   STORE_LOCAL_NAME : aliased constant String := "awa_store_local";
   COL_0_4_NAME : aliased constant String := "id";
   COL_1_4_NAME : aliased constant String := "version";
   COL_2_4_NAME : aliased constant String := "create_date";
   COL_3_4_NAME : aliased constant String := "expire_date";
   COL_4_4_NAME : aliased constant String := "path";
   COL_5_4_NAME : aliased constant String := "store_version";
   COL_6_4_NAME : aliased constant String := "shared";
   COL_7_4_NAME : aliased constant String := "storage_id";
   STORE_LOCAL_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 8,
      Table => STORE_LOCAL_NAME'Access,
      Members => (
         COL_0_4_NAME'Access,
         COL_1_4_NAME'Access,
         COL_2_4_NAME'Access,
         COL_3_4_NAME'Access,
         COL_4_4_NAME'Access,
         COL_5_4_NAME'Access,
         COL_6_4_NAME'Access,
         COL_7_4_NAME'Access
)
     );
   Null_Store_Local : constant Store_Local_Ref
      := Store_Local_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Store_Local_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => STORE_LOCAL_TABLE'Access)
   with record
       Version : Integer;
       Create_Date : Ada.Calendar.Time;
       Expire_Date : Ada.Calendar.Time;
       Path : Ada.Strings.Unbounded.Unbounded_String;
       Store_Version : Integer;
       Shared : Boolean;
       Storage : Storage_Ref;
   end record;
   type Store_Local_Access is access all Store_Local_Impl;
   overriding
   procedure Destroy (Object : access Store_Local_Impl);
   overriding
   procedure Find (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Store_Local_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Store_Local_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Store_Local_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Store_Local_Ref'Class;
                        Impl   : out Store_Local_Access);

   package File_1 is
      new ADO.Queries.Loaders.File (Path => "storage-queries.xml",
                                    Sha1 => "9B2B599473F75F92CB5AB5045675E4CCEF926543");

   package Def_Storage_Get_Data is
      new ADO.Queries.Loaders.Query (Name => "storage-get-data",
                                     File => File_1.File'Access);
   Query_Storage_Get_Data : constant ADO.Queries.Query_Definition_Access
   := Def_Storage_Get_Data.Query'Access;

   package Def_Storage_Get_Local is
      new ADO.Queries.Loaders.Query (Name => "storage-get-local",
                                     File => File_1.File'Access);
   Query_Storage_Get_Local : constant ADO.Queries.Query_Definition_Access
   := Def_Storage_Get_Local.Query'Access;

   package Def_Storage_Get_Storage is
      new ADO.Queries.Loaders.Query (Name => "storage-get-storage",
                                     File => File_1.File'Access);
   Query_Storage_Get_Storage : constant ADO.Queries.Query_Definition_Access
   := Def_Storage_Get_Storage.Query'Access;

   package Def_Storage_Delete_Local is
      new ADO.Queries.Loaders.Query (Name => "storage-delete-local",
                                     File => File_1.File'Access);
   Query_Storage_Delete_Local : constant ADO.Queries.Query_Definition_Access
   := Def_Storage_Delete_Local.Query'Access;

   package File_2 is
      new ADO.Queries.Loaders.File (Path => "folder-queries.xml",
                                    Sha1 => "4A3EAF58F54C45825D96AED13FE40DD0EB97D591");

   package Def_Folderinfo_Storage_Folder_List is
      new ADO.Queries.Loaders.Query (Name => "storage-folder-list",
                                     File => File_2.File'Access);
   Query_Storage_Folder_List : constant ADO.Queries.Query_Definition_Access
   := Def_Folderinfo_Storage_Folder_List.Query'Access;

   package File_3 is
      new ADO.Queries.Loaders.File (Path => "storage-list.xml",
                                    Sha1 => "C4BF5BFDB927D353A6FC65AC4B8ED031E25278B9");

   package Def_Storageinfo_Storage_List is
      new ADO.Queries.Loaders.Query (Name => "storage-list",
                                     File => File_3.File'Access);
   Query_Storage_List : constant ADO.Queries.Query_Definition_Access
   := Def_Storageinfo_Storage_List.Query'Access;
end AWA.Storages.Models;
