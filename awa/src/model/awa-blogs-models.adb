-----------------------------------------------------------------------
--  AWA.Blogs.Models -- AWA.Blogs.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2009, 2010, 2011 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
package body AWA.Blogs.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;

   function Blog_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => BLOG_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Blog_Key;
   function Blog_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => BLOG_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Blog_Key;
   function "=" (Left, Right : Blog_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";
   procedure Set_Field (Object : in out Blog_Ref'Class;
                        Impl   : out Blog_Access;
                        Field  : in Positive) is
   begin
      Object.Set_Field (Field);
      Impl := Blog_Impl (Object.Get_Object.all)'Access;
   end Set_Field;
   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Blog_Ref) is
      Impl : Blog_Access;
   begin
      Impl := new Blog_Impl;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Blog
   -- ----------------------------------------
   procedure Set_Id (Object : in out Blog_Ref;
                      Value  : in ADO.Identifier) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl, 1);
      ADO.Objects.Set_Key_Value (Impl.all, Value);
   end Set_Id;
   function Get_Id (Object : in Blog_Ref)
                  return ADO.Identifier is
      Impl : constant Blog_Access := Blog_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;
   function Get_Version (Object : in Blog_Ref)
                  return Integer is
      Impl : constant Blog_Access := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;
   procedure Set_Name (Object : in out Blog_Ref;
                        Value : in String) is
   begin
      Object.Set_Name (Ada.Strings.Unbounded.To_Unbounded_String (Value));
   end Set_Name;
   procedure Set_Name (Object : in out Blog_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl, 3);
      Impl.Name := Value;
   end Set_Name;
   function Get_Name (Object : in Blog_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Blog_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Blog_Access := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;
   --  Copy of the object.
   function Copy (Object : Blog_Ref) return Blog_Ref is
      Result : Blog_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Blog_Access
              := Blog_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Blog_Access
              := new Blog_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Name := Impl.Name;
         end;
      end if;
      return Result;
   end Copy;
   procedure Find (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Blog_Access := new Blog_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;
   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Blog_Access := new Blog_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;
   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Blog_Access := new Blog_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;
   procedure Save (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Blog_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;
   procedure Delete (Object  : in out Blog_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;
   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Blog_Impl) is
      type Blog_Impl_Ptr is access all Blog_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Blog_Impl, Blog_Impl_Ptr);
      Ptr : Blog_Impl_Ptr := Blog_Impl (Object.all)'Access;
   begin
      Unchecked_Free (Ptr);
   end Destroy;
   procedure Find (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (BLOG_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;
   overriding
   procedure Load (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;
   procedure Save (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (BLOG_TABLE'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  ID
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  NAME
                          Value => Object.Name);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result = 0 then
                  raise ADO.Objects.LAZY_LOCK;
               else
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;
   procedure Create (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (BLOG_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  ID
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  NAME
                        Value => Object.Name);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;
   procedure Delete (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (BLOG_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;
   function Get_Value (Item : in Blog_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Impl : constant access Blog_Impl
         := Blog_Impl (Item.Get_Load_Object.all)'Access;
   begin
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      if Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      end if;
      raise ADO.Objects.NOT_FOUND;
   end Get_Value;
   procedure List (Object  : in out Blog_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (BLOG_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      Blog_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Blog_Ref;
            Impl : constant Blog_Access := new Blog_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;
   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Blog_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (2);
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Post_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => POST_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Post_Key;
   function Post_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_STRING,
                                       Of_Class => POST_TABLE'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Post_Key;
   function "=" (Left, Right : Post_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";
   procedure Set_Field (Object : in out Post_Ref'Class;
                        Impl   : out Post_Access;
                        Field  : in Positive) is
   begin
      Object.Set_Field (Field);
      Impl := Post_Impl (Object.Get_Object.all)'Access;
   end Set_Field;
   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Post_Ref) is
      Impl : Post_Access;
   begin
      Impl := new Post_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Post
   -- ----------------------------------------
   procedure Set_Id (Object : in out Post_Ref;
                      Value  : in ADO.Identifier) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 1);
      ADO.Objects.Set_Key_Value (Impl.all, Value);
   end Set_Id;
   function Get_Id (Object : in Post_Ref)
                  return ADO.Identifier is
      Impl : constant Post_Access := Post_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;
   function Get_Version (Object : in Post_Ref)
                  return Integer is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;
   procedure Set_Title (Object : in out Post_Ref;
                         Value : in String) is
   begin
      Object.Set_Title (Ada.Strings.Unbounded.To_Unbounded_String (Value));
   end Set_Title;
   procedure Set_Title (Object : in out Post_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 3);
      Impl.Title := Value;
   end Set_Title;
   function Get_Title (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Title);
   end Get_Title;
   function Get_Title (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Title;
   end Get_Title;
   procedure Set_Uri (Object : in out Post_Ref;
                       Value : in String) is
   begin
      Object.Set_Uri (Ada.Strings.Unbounded.To_Unbounded_String (Value));
   end Set_Uri;
   procedure Set_Uri (Object : in out Post_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 4);
      Impl.Uri := Value;
   end Set_Uri;
   function Get_Uri (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Uri);
   end Get_Uri;
   function Get_Uri (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Uri;
   end Get_Uri;
   procedure Set_Text (Object : in out Post_Ref;
                        Value : in String) is
   begin
      Object.Set_Text (Ada.Strings.Unbounded.To_Unbounded_String (Value));
   end Set_Text;
   procedure Set_Text (Object : in out Post_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 5);
      Impl.Text := Value;
   end Set_Text;
   function Get_Text (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Text);
   end Get_Text;
   function Get_Text (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Text;
   end Get_Text;
   procedure Set_Create_Date (Object : in out Post_Ref;
                               Value  : in Ada.Calendar.Time) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 6);
      Impl.Create_Date := Value;
   end Set_Create_Date;
   function Get_Create_Date (Object : in Post_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;
   procedure Set_Author (Object : in out Post_Ref;
                          Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 7);
      Impl.Author := AWA.Users.Models.User_Ref (Value);
   end Set_Author;
   function Get_Author (Object : in Post_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Author;
   end Get_Author;
   procedure Set_Blog (Object : in out Post_Ref;
                        Value  : in Blog_Ref'Class) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl, 8);
      Impl.Blog := Blog_Ref (Value);
   end Set_Blog;
   function Get_Blog (Object : in Post_Ref)
                  return Blog_Ref'Class is
      Impl : constant Post_Access := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Blog;
   end Get_Blog;
   --  Copy of the object.
   function Copy (Object : Post_Ref) return Post_Ref is
      Result : Post_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Post_Access
              := Post_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Post_Access
              := new Post_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Title := Impl.Title;
            Copy.Uri := Impl.Uri;
            Copy.Text := Impl.Text;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Author := Impl.Author;
            Copy.Blog := Impl.Blog;
         end;
      end if;
      return Result;
   end Copy;
   procedure Find (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Post_Access := new Post_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;
   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Post_Access := new Post_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;
   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Post_Access := new Post_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;
   procedure Save (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Post_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;
   procedure Delete (Object  : in out Post_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;
   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Post_Impl) is
      type Post_Impl_Ptr is access all Post_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Post_Impl, Post_Impl_Ptr);
      Ptr : Post_Impl_Ptr := Post_Impl (Object.all)'Access;
   begin
      Unchecked_Free (Ptr);
   end Destroy;
   procedure Find (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (POST_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;
   overriding
   procedure Load (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;
   procedure Save (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (POST_TABLE'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  ID
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  TITLE
                          Value => Object.Title);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  URI
                          Value => Object.Uri);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  TEXT
                          Value => Object.Text);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  CREATE_DATE
                          Value => Object.Create_Date);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  AUTHOR_ID
                          Value => Object.Author);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  BLOG_ID
                          Value => Object.Blog);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result = 0 then
                  raise ADO.Objects.LAZY_LOCK;
               else
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;
   procedure Create (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (POST_TABLE'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  ID
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  TITLE
                        Value => Object.Title);
      Query.Save_Field (Name  => COL_3_2_NAME, --  URI
                        Value => Object.Uri);
      Query.Save_Field (Name  => COL_4_2_NAME, --  TEXT
                        Value => Object.Text);
      Query.Save_Field (Name  => COL_5_2_NAME, --  CREATE_DATE
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_6_2_NAME, --  AUTHOR_ID
                        Value => Object.Author);
      Query.Save_Field (Name  => COL_7_2_NAME, --  BLOG_ID
                        Value => Object.Blog);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;
   procedure Delete (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (POST_TABLE'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;
   function Get_Value (Item : in Post_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Impl : constant access Post_Impl
         := Post_Impl (Item.Get_Load_Object.all)'Access;
   begin
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      end if;
      if Name = "title" then
         return Util.Beans.Objects.To_Object (Impl.Title);
      end if;
      if Name = "uri" then
         return Util.Beans.Objects.To_Object (Impl.Uri);
      end if;
      if Name = "text" then
         return Util.Beans.Objects.To_Object (Impl.Text);
      end if;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      end if;
      raise ADO.Objects.NOT_FOUND;
   end Get_Value;
   procedure List (Object  : in out Post_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement := Session.Create_Statement (POST_TABLE'Access);
   begin
      Stmt.Set_Parameters (Query);
      Stmt.Execute;
      Post_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Post_Ref;
            Impl : constant Post_Access := new Post_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;
   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Post_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Title := Stmt.Get_Unbounded_String (2);
      Object.Uri := Stmt.Get_Unbounded_String (3);
      Object.Text := Stmt.Get_Unbounded_String (4);
      Object.Create_Date := Stmt.Get_Time (5);
      if not Stmt.Is_Null (6) then
          Object.Author.Set_Key_Value (Stmt.Get_Identifier (6), Session);
      end if;
      if not Stmt.Is_Null (7) then
          Object.Blog.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;

end AWA.Blogs.Models;
