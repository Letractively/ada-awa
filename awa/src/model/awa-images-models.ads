-----------------------------------------------------------------------
--  AWA.Images.Models -- AWA.Images.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2011 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off, "unit * is not referenced");
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
with AWA.Storages.Models;
with AWA.Users.Models;
with AWA.Workspaces.Models;
pragma Warnings (On, "unit * is not referenced");
package AWA.Images.Models is
   --  --------------------
   --  The image folder contains a set of images that have been uploaded by the user.
   --  --------------------
   --  Create an object key for Image_Folder.
   function Image_Folder_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Image_Folder from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Image_Folder_Key (Id : in String) return ADO.Objects.Object_Key;

   type Image_Folder_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Image_Folder : constant Image_Folder_Ref;
   function "=" (Left, Right : Image_Folder_Ref'Class) return Boolean;

   --  Set the image folder identifier
   procedure Set_Id (Object : in out Image_Folder_Ref;
                     Value  : in ADO.Identifier);

   --  Get the image folder identifier
   function Get_Id (Object : in Image_Folder_Ref)
                 return ADO.Identifier;
   --  Get the image folder version.
   function Get_Version (Object : in Image_Folder_Ref)
                 return Integer;

   --  Set the image folder name
   procedure Set_Name (Object : in out Image_Folder_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Image_Folder_Ref;
                       Value : in String);

   --  Get the image folder name
   function Get_Name (Object : in Image_Folder_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Image_Folder_Ref)
                 return String;

   --  Set the image folder creation date
   procedure Set_Create_Date (Object : in out Image_Folder_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the image folder creation date
   function Get_Create_Date (Object : in Image_Folder_Ref)
                 return Ada.Calendar.Time;

   --  Set the user who owns this image folder
   procedure Set_User (Object : in out Image_Folder_Ref;
                       Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the user who owns this image folder
   function Get_User (Object : in Image_Folder_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set the workspace that this image folder belongs.
   procedure Set_Workspace (Object : in out Image_Folder_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class);

   --  Get the workspace that this image folder belongs.
   function Get_Workspace (Object : in Image_Folder_Ref)
                 return AWA.Workspaces.Models.Workspace_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Image_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Image_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Image_Folder_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Image_Folder_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Image_Folder_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Image_Folder_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   IMAGE_FOLDER_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Image_Folder_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Image_Folder_Ref;
                   Into   : in out Image_Folder_Ref);

   package Image_Folder_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Image_Folder_Ref,
                                  "="          => "=");
   subtype Image_Folder_Vector is Image_Folder_Vectors.Vector;

   procedure List (Object  : in out Image_Folder_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);
   --  --------------------
   --  An image that was uploaded by a user in an image folder.
   --  --------------------
   --  Create an object key for Image.
   function Image_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Image from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Image_Key (Id : in String) return ADO.Objects.Object_Key;

   type Image_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Image : constant Image_Ref;
   function "=" (Left, Right : Image_Ref'Class) return Boolean;

   --  Set the image identifier.
   procedure Set_Id (Object : in out Image_Ref;
                     Value  : in ADO.Identifier);

   --  Get the image identifier.
   function Get_Id (Object : in Image_Ref)
                 return ADO.Identifier;
   --  Get the image version.
   function Get_Version (Object : in Image_Ref)
                 return Integer;

   --  Set the image width.
   procedure Set_Width (Object : in out Image_Ref;
                        Value  : in Natural);

   --  Get the image width.
   function Get_Width (Object : in Image_Ref)
                 return Natural;

   --  Set the image height.
   procedure Set_Height (Object : in out Image_Ref;
                         Value  : in Natural);

   --  Get the image height.
   function Get_Height (Object : in Image_Ref)
                 return Natural;

   --  Set the task within the server which is processing this message
   procedure Set_Task_Id (Object : in out Image_Ref;
                          Value  : in Integer);

   --  Get the task within the server which is processing this message
   function Get_Task_Id (Object : in Image_Ref)
                 return Integer;

   --  Set the image name.
   procedure Set_Name (Object : in out Image_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Image_Ref;
                       Value : in String);

   --  Get the image name.
   function Get_Name (Object : in Image_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Image_Ref)
                 return String;

   --  Set the image type.
   procedure Set_Mime_Type (Object : in out Image_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Mime_Type (Object : in out Image_Ref;
                            Value : in String);

   --  Get the image type.
   function Get_Mime_Type (Object : in Image_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Mime_Type (Object : in Image_Ref)
                 return String;

   --  Set the image path.
   procedure Set_Path (Object : in out Image_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Path (Object : in out Image_Ref;
                       Value : in String);

   --  Get the image path.
   function Get_Path (Object : in Image_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Path (Object : in Image_Ref)
                 return String;

   --  Set the image creation date.
   procedure Set_Create_Date (Object : in out Image_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the image creation date.
   function Get_Create_Date (Object : in Image_Ref)
                 return Ada.Calendar.Time;

   --  Set the original image if this image was created by the application.
   procedure Set_Original (Object : in out Image_Ref;
                           Value  : in Image_Ref'Class);

   --  Get the original image if this image was created by the application.
   function Get_Original (Object : in Image_Ref)
                 return Image_Ref'Class;

   --  Set the thumbnail image to display the image is an image selector.
   procedure Set_Thumbnail (Object : in out Image_Ref;
                            Value  : in Image_Ref'Class);

   --  Get the thumbnail image to display the image is an image selector.
   function Get_Thumbnail (Object : in Image_Ref)
                 return Image_Ref'Class;

   --  Set the user who uploaded the image.
   procedure Set_User (Object : in out Image_Ref;
                       Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the user who uploaded the image.
   function Get_User (Object : in Image_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set the image folder where this image is stored.
   procedure Set_Folder (Object : in out Image_Ref;
                         Value  : in Image_Folder_Ref'Class);

   --  Get the image folder where this image is stored.
   function Get_Folder (Object : in Image_Ref)
                 return Image_Folder_Ref'Class;

   --  Set the image data if the storage type is DATABASE.
   procedure Set_Image (Object : in out Image_Ref;
                        Value  : in AWA.Storages.Models.Storage_Ref'Class);

   --  Get the image data if the storage type is DATABASE.
   function Get_Image (Object : in Image_Ref)
                 return AWA.Storages.Models.Storage_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Image_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Image_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Image_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Image_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Image_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Image_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   IMAGE_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Image_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Image_Ref;
                   Into   : in out Image_Ref);

   package Image_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Image_Ref,
                                  "="          => "=");
   subtype Image_Vector is Image_Vectors.Vector;

   procedure List (Object  : in out Image_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);


private
   IMAGE_FOLDER_NAME : aliased constant String := "awa_image_folder";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "name";
   COL_3_1_NAME : aliased constant String := "create_date";
   COL_4_1_NAME : aliased constant String := "user_id";
   COL_5_1_NAME : aliased constant String := "workspace_id";
   IMAGE_FOLDER_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 6,
      Table => IMAGE_FOLDER_NAME'Access,
      Members => (
         COL_0_1_NAME'Access,
         COL_1_1_NAME'Access,
         COL_2_1_NAME'Access,
         COL_3_1_NAME'Access,
         COL_4_1_NAME'Access,
         COL_5_1_NAME'Access
)
     );
   Null_Image_Folder : constant Image_Folder_Ref
      := Image_Folder_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Image_Folder_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => IMAGE_FOLDER_TABLE'Access)
   with record
       Version : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       User : AWA.Users.Models.User_Ref;
       Workspace : AWA.Workspaces.Models.Workspace_Ref;
   end record;
   type Image_Folder_Access is access all Image_Folder_Impl;
   overriding
   procedure Destroy (Object : access Image_Folder_Impl);
   overriding
   procedure Find (Object  : in out Image_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Image_Folder_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Image_Folder_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Image_Folder_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Image_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Image_Folder_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Image_Folder_Ref'Class;
                        Impl   : out Image_Folder_Access);
   IMAGE_NAME : aliased constant String := "awa_image";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "width";
   COL_3_2_NAME : aliased constant String := "height";
   COL_4_2_NAME : aliased constant String := "task_id";
   COL_5_2_NAME : aliased constant String := "name";
   COL_6_2_NAME : aliased constant String := "mime_type";
   COL_7_2_NAME : aliased constant String := "path";
   COL_8_2_NAME : aliased constant String := "create_date";
   COL_9_2_NAME : aliased constant String := "original_id";
   COL_10_2_NAME : aliased constant String := "thumbnail_id";
   COL_11_2_NAME : aliased constant String := "user_id";
   COL_12_2_NAME : aliased constant String := "folder_id";
   COL_13_2_NAME : aliased constant String := "image_id";
   IMAGE_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 14,
      Table => IMAGE_NAME'Access,
      Members => (
         COL_0_2_NAME'Access,
         COL_1_2_NAME'Access,
         COL_2_2_NAME'Access,
         COL_3_2_NAME'Access,
         COL_4_2_NAME'Access,
         COL_5_2_NAME'Access,
         COL_6_2_NAME'Access,
         COL_7_2_NAME'Access,
         COL_8_2_NAME'Access,
         COL_9_2_NAME'Access,
         COL_10_2_NAME'Access,
         COL_11_2_NAME'Access,
         COL_12_2_NAME'Access,
         COL_13_2_NAME'Access
)
     );
   Null_Image : constant Image_Ref
      := Image_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Image_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => IMAGE_TABLE'Access)
   with record
       Version : Integer;
       Width : Natural;
       Height : Natural;
       Task_Id : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Mime_Type : Ada.Strings.Unbounded.Unbounded_String;
       Path : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Original : Image_Ref;
       Thumbnail : Image_Ref;
       User : AWA.Users.Models.User_Ref;
       Folder : Image_Folder_Ref;
       Image : AWA.Storages.Models.Storage_Ref;
   end record;
   type Image_Access is access all Image_Impl;
   overriding
   procedure Destroy (Object : access Image_Impl);
   overriding
   procedure Find (Object  : in out Image_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Image_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Image_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Image_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Image_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Image_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Image_Ref'Class;
                        Impl   : out Image_Access);
end AWA.Images.Models;
