-----------------------------------------------------------------------
--  Awa.Workspaces.Models -- Awa.Workspaces.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2011 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
with AWA.Users.Models;
package Awa.Workspaces.Models is
   --  --------------------
   --  The workspace allows to group all together the different
   --  application entities which belong to a user or a set of collaborating users.
   --  Other entities, for example a Blog, a Wiki space, will link to a
   --  single workspace.
   --  The workspace has members which are allowed to access the entities
   --  that are part of the workspace.  A workspace owner decides which user
   --  is part of the workspace or not.
   --  --------------------
   --  Create an object key for Workspace.
   function Workspace_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Workspace from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Workspace_Key (Id : in String) return ADO.Objects.Object_Key;

   type Workspace_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Workspace : constant Workspace_Ref;
   function "=" (Left, Right : Workspace_Ref'Class) return Boolean;

   --  Set the workspace id
   procedure Set_Id (Object : in out Workspace_Ref;
                     Value  : in ADO.Identifier);

   --  Get the workspace id
   function Get_Id (Object : in Workspace_Ref)
                 return ADO.Identifier;
   --  Get 
   function Get_Version (Object : in Workspace_Ref)
                 return Integer;

   --  Set the workspace creation date
   procedure Set_Create_Date (Object : in out Workspace_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the workspace creation date
   function Get_Create_Date (Object : in Workspace_Ref)
                 return Ada.Calendar.Time;

   --  Set the workspace owner
   procedure Set_Owner (Object : in out Workspace_Ref;
                        Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the workspace owner
   function Get_Owner (Object : in Workspace_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Workspace_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Workspace_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Workspace_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Workspace_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Workspace_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Workspace_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   WORKSPACE_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Workspace_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Workspace_Ref;
                   Into   : in out Workspace_Ref);

   package Workspace_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Workspace_Ref,
                                  "="          => "=");
   subtype Workspace_Vector is Workspace_Vectors.Vector;

   procedure List (Object  : in out Workspace_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);
   --  --------------------
   --  The workspace member indicates the users who are part of the workspace.
   --  --------------------
   --  Create an object key for Member.
   function Member_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Member from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Member_Key (Id : in String) return ADO.Objects.Object_Key;

   type Member_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Member : constant Member_Ref;
   function "=" (Left, Right : Member_Ref'Class) return Boolean;

   --  Set the member id
   procedure Set_Id (Object : in out Member_Ref;
                     Value  : in ADO.Identifier);

   --  Get the member id
   function Get_Id (Object : in Member_Ref)
                 return ADO.Identifier;
   --  Get 
   function Get_Version (Object : in Member_Ref)
                 return Integer;

   --  Set the member creation date
   procedure Set_Create_Date (Object : in out Member_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the member creation date
   function Get_Create_Date (Object : in Member_Ref)
                 return Ada.Calendar.Time;

   --  Set the workspace member
   procedure Set_Member (Object : in out Member_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the workspace member
   function Get_Member (Object : in Member_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set the workspace
   procedure Set_Workspace (Object : in out Member_Ref;
                            Value  : in Workspace_Ref'Class);

   --  Get the workspace
   function Get_Workspace (Object : in Member_Ref)
                 return Workspace_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Member_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Member_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   MEMBER_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Member_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Member_Ref;
                   Into   : in out Member_Ref);

   package Member_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Member_Ref,
                                  "="          => "=");
   subtype Member_Vector is Member_Vectors.Vector;

   procedure List (Object  : in out Member_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);


private
   WORKSPACE_NAME : aliased constant String := "workspace";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "create_date";
   COL_3_1_NAME : aliased constant String := "owner_fk";
   WORKSPACE_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 4,
      Table => WORKSPACE_NAME'Access,
      Members => (
         COL_0_1_NAME'Access,
         COL_1_1_NAME'Access,
         COL_2_1_NAME'Access,
         COL_3_1_NAME'Access
)
     );
   Null_Workspace : constant Workspace_Ref
      := Workspace_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Workspace_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => WORKSPACE_TABLE'Access)
   with record
       Version : Integer;
       Create_Date : Ada.Calendar.Time;
       Owner : AWA.Users.Models.User_Ref;
   end record;
   type Workspace_Access is access all Workspace_Impl;
   overriding
   procedure Destroy (Object : access Workspace_Impl);
   overriding
   procedure Find (Object  : in out Workspace_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Workspace_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Workspace_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Workspace_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Workspace_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Workspace_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Workspace_Ref'Class;
                        Impl   : out Workspace_Access);
   MEMBER_NAME : aliased constant String := "workspace_member";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "create_date";
   COL_3_2_NAME : aliased constant String := "user_fk";
   COL_4_2_NAME : aliased constant String := "workspace_fk";
   MEMBER_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => MEMBER_NAME'Access,
      Members => (
         COL_0_2_NAME'Access,
         COL_1_2_NAME'Access,
         COL_2_2_NAME'Access,
         COL_3_2_NAME'Access,
         COL_4_2_NAME'Access
)
     );
   Null_Member : constant Member_Ref
      := Member_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Member_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => MEMBER_TABLE'Access)
   with record
       Version : Integer;
       Create_Date : Ada.Calendar.Time;
       Member : AWA.Users.Models.User_Ref;
       Workspace : Workspace_Ref;
   end record;
   type Member_Access is access all Member_Impl;
   overriding
   procedure Destroy (Object : access Member_Impl);
   overriding
   procedure Find (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Member_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Member_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Member_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Member_Ref'Class;
                        Impl   : out Member_Access);
end Awa.Workspaces.Models;
