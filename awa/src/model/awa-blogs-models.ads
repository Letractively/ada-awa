-----------------------------------------------------------------------
--  AWA.Blogs.Models -- AWA.Blogs.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 166
-----------------------------------------------------------------------
--  Copyright (C) 2009, 2010, 2011 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with AWA.Users.Models;
package AWA.Blogs.Models is
   --  --------------------
   --  Blog 
   --  --------------------
   --  Create an object key for Blog.
   function Blog_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Blog from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Blog_Key (Id : in String) return ADO.Objects.Object_Key;

   type Blog_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Blog : constant Blog_Ref;
   function "=" (Left, Right : Blog_Ref'Class) return Boolean;

   --  Set the blog identifier
   procedure Set_Id (Object : in out Blog_Ref;
                     Value  : in ADO.Identifier);

   --  Get the blog identifier
   function Get_Id (Object : in Blog_Ref)
                 return ADO.Identifier;
   --  Get 
   function Get_Version (Object : in Blog_Ref)
                 return Integer;

   --  Set the blog name
   procedure Set_Name (Object : in out Blog_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Blog_Ref;
                       Value : in String);

   --  Get the blog name
   function Get_Name (Object : in Blog_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Blog_Ref)
                 return String;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Blog_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Blog_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   BLOG_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Blog_Ref);

   --  Copy of the object.
   function Copy (Object : Blog_Ref) return Blog_Ref;

   package Blog_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Blog_Ref,
                                  "="          => "=");
   subtype Blog_Vector is Blog_Vectors.Vector;

   procedure List (Object  : in out Blog_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);
   --  --------------------
   --  Post in a blog
   --  --------------------
   --  Create an object key for Post.
   function Post_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Post from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Post_Key (Id : in String) return ADO.Objects.Object_Key;

   type Post_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Post : constant Post_Ref;
   function "=" (Left, Right : Post_Ref'Class) return Boolean;

   --  Set the post identifier
   procedure Set_Id (Object : in out Post_Ref;
                     Value  : in ADO.Identifier);

   --  Get the post identifier
   function Get_Id (Object : in Post_Ref)
                 return ADO.Identifier;
   --  Get 
   function Get_Version (Object : in Post_Ref)
                 return Integer;

   --  Set the post title
   procedure Set_Title (Object : in out Post_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Title (Object : in out Post_Ref;
                        Value : in String);

   --  Get the post title
   function Get_Title (Object : in Post_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Title (Object : in Post_Ref)
                 return String;

   --  Set the uri
   procedure Set_Uri (Object : in out Post_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Uri (Object : in out Post_Ref;
                      Value : in String);

   --  Get the uri
   function Get_Uri (Object : in Post_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Uri (Object : in Post_Ref)
                 return String;

   --  Set the blog text content
   procedure Set_Text (Object : in out Post_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Text (Object : in out Post_Ref;
                       Value : in String);

   --  Get the blog text content
   function Get_Text (Object : in Post_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Text (Object : in Post_Ref)
                 return String;

   --  Set the post creation date
   procedure Set_Create_Date (Object : in out Post_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the post creation date
   function Get_Create_Date (Object : in Post_Ref)
                 return Ada.Calendar.Time;

   --  Set 
   procedure Set_Author (Object : in out Post_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get 
   function Get_Author (Object : in Post_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set 
   procedure Set_Blog (Object : in out Post_Ref;
                       Value  : in Blog_Ref'Class);

   --  Get 
   function Get_Blog (Object : in Post_Ref)
                 return Blog_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Post_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Post_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   POST_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Post_Ref);

   --  Copy of the object.
   function Copy (Object : Post_Ref) return Post_Ref;

   package Post_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Post_Ref,
                                  "="          => "=");
   subtype Post_Vector is Post_Vectors.Vector;

   procedure List (Object  : in out Post_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);


private
   BLOG_NAME : aliased constant String := "blog";
   COL_0_1_NAME : aliased constant String := "ID";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "NAME";
   BLOG_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 3,
      Table => BLOG_NAME'Access,
      Members => (
         COL_0_1_NAME'Access,
         COL_1_1_NAME'Access,
         COL_2_1_NAME'Access
)
     );
   Null_Blog : constant Blog_Ref
      := Blog_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Blog_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => BLOG_TABLE'Access)
   with record
       Version : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
   end record;
   type Blog_Access is access all Blog_Impl;
   overriding
   procedure Destroy (Object : access Blog_Impl);
   overriding
   procedure Find (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Blog_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Blog_Ref'Class;
                        Impl   : out Blog_Access;
                        Field  : in Positive);
   POST_NAME : aliased constant String := "blog_post";
   COL_0_2_NAME : aliased constant String := "ID";
   COL_1_2_NAME : aliased constant String := "version";
   COL_2_2_NAME : aliased constant String := "TITLE";
   COL_3_2_NAME : aliased constant String := "URI";
   COL_4_2_NAME : aliased constant String := "TEXT";
   COL_5_2_NAME : aliased constant String := "CREATE_DATE";
   COL_6_2_NAME : aliased constant String := "AUTHOR_ID";
   COL_7_2_NAME : aliased constant String := "BLOG_ID";
   POST_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 8,
      Table => POST_NAME'Access,
      Members => (
         COL_0_2_NAME'Access,
         COL_1_2_NAME'Access,
         COL_2_2_NAME'Access,
         COL_3_2_NAME'Access,
         COL_4_2_NAME'Access,
         COL_5_2_NAME'Access,
         COL_6_2_NAME'Access,
         COL_7_2_NAME'Access
)
     );
   Null_Post : constant Post_Ref
      := Post_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Post_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => POST_TABLE'Access)
   with record
       Version : Integer;
       Title : Ada.Strings.Unbounded.Unbounded_String;
       Uri : Ada.Strings.Unbounded.Unbounded_String;
       Text : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Author : AWA.Users.Models.User_Ref;
       Blog : Blog_Ref;
   end record;
   type Post_Access is access all Post_Impl;
   overriding
   procedure Destroy (Object : access Post_Impl);
   overriding
   procedure Find (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Post_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Post_Ref'Class;
                        Impl   : out Post_Access;
                        Field  : in Positive);
end AWA.Blogs.Models;
