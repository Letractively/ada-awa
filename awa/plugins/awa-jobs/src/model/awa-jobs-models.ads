-----------------------------------------------------------------------
--  AWA.Jobs.Models -- AWA.Jobs.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 395
-----------------------------------------------------------------------
--  Copyright (C) 2012 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off, "unit * is not referenced");
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Objects.Enums;
with Util.Beans.Basic.Lists;
with AWA.Users.Models;
pragma Warnings (On, "unit * is not referenced");
package AWA.Jobs.Models is
   type Job_Status_Type is (SCHEDULED, RUNNING, CANCELED, FAILED, TERMINATED);
   for Job_Status_Type use (SCHEDULED => 0, RUNNING => 1, CANCELED => 2, FAILED => 3, TERMINATED => 4);
   package Job_Status_Type_Objects is
      new Util.Beans.Objects.Enums (Job_Status_Type);

   --  --------------------
   --  The jobs table.
   --  --------------------
   --  Create an object key for Job.
   function Job_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Job from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Job_Key (Id : in String) return ADO.Objects.Object_Key;

   type Job_Ref is new ADO.Objects.Object_Ref with null record;

   Null_Job : constant Job_Ref;
   function "=" (Left, Right : Job_Ref'Class) return Boolean;

   --  Set the jobs id
   procedure Set_Id (Object : in out Job_Ref;
                     Value  : in ADO.Identifier);

   --  Get the jobs id
   function Get_Id (Object : in Job_Ref)
                 return ADO.Identifier;
   --  Get the jobs version
   function Get_Version (Object : in Job_Ref)
                 return Integer;

   --  Set the jobs name
   procedure Set_Name (Object : in out Job_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Name (Object : in out Job_Ref;
                       Value : in String);

   --  Get the jobs name
   function Get_Name (Object : in Job_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Name (Object : in Job_Ref)
                 return String;

   --  Set the jobs creation date
   procedure Set_Create_Date (Object : in out Job_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the jobs creation date
   function Get_Create_Date (Object : in Job_Ref)
                 return Ada.Calendar.Time;

   --  Set the jobs start date
   procedure Set_Start_Date (Object : in out Job_Ref;
                             Value  : in ADO.Nullable_Time);

   --  Get the jobs start date
   function Get_Start_Date (Object : in Job_Ref)
                 return ADO.Nullable_Time;

   --  Set the jobs finish date
   procedure Set_Finish_Date (Object : in out Job_Ref;
                              Value  : in ADO.Nullable_Time);

   --  Get the jobs finish date
   function Get_Finish_Date (Object : in Job_Ref)
                 return ADO.Nullable_Time;

   --  Set the job status
   procedure Set_Status (Object : in out Job_Ref;
                         Value  : in Job_Status_Type);

   --  Get the job status
   function Get_Status (Object : in Job_Ref)
                 return Job_Status_Type;

   --  Set the server which is processing this job
   procedure Set_Server_Id (Object : in out Job_Ref;
                            Value  : in Integer);

   --  Get the server which is processing this job
   function Get_Server_Id (Object : in Job_Ref)
                 return Integer;

   --  Set the task within the server which is processing this job
   procedure Set_Task_Id (Object : in out Job_Ref;
                          Value  : in Integer);

   --  Get the task within the server which is processing this job
   function Get_Task_Id (Object : in Job_Ref)
                 return Integer;

   --  Set the job parameters
   procedure Set_Parameters (Object : in out Job_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Parameters (Object : in out Job_Ref;
                             Value : in String);

   --  Get the job parameters
   function Get_Parameters (Object : in Job_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Parameters (Object : in Job_Ref)
                 return String;

   --  Set the job messages
   procedure Set_Messages (Object : in out Job_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Messages (Object : in out Job_Ref;
                           Value : in String);

   --  Get the job messages
   function Get_Messages (Object : in Job_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Messages (Object : in Job_Ref)
                 return String;

   --  Set the job results
   procedure Set_Results (Object : in out Job_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Results (Object : in out Job_Ref;
                          Value : in String);

   --  Get the job results
   function Get_Results (Object : in Job_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Results (Object : in Job_Ref)
                 return String;

   --  Set the user who triggered the job
   procedure Set_User (Object : in out Job_Ref;
                       Value  : in AWA.Users.Models.User_Ref'Class);

   --  Get the user who triggered the job
   function Get_User (Object : in Job_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Set the user session who triggered the job
   procedure Set_Session (Object : in out Job_Ref;
                          Value  : in AWA.Users.Models.Session_Ref'Class);

   --  Get the user session who triggered the job
   function Get_Session (Object : in Job_Ref)
                 return AWA.Users.Models.Session_Ref'Class;

   --  Set the message queue associated with this message
   procedure Set_Queue (Object : in out Job_Ref;
                        Value  : in Queue_Ref'Class);

   --  Get the message queue associated with this message
   function Get_Queue (Object : in Job_Ref)
                 return Queue_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Job_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Job_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Job_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Job_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Job_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (Item : in Job_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   JOB_TABLE : aliased constant ADO.Schemas.Class_Mapping;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Job_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Job_Ref;
                   Into   : in out Job_Ref);

   package Job_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Job_Ref,
                                  "="          => "=");
   subtype Job_Vector is Job_Vectors.Vector;

   procedure List (Object  : in out Job_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);


private
   JOB_NAME : aliased constant String := "awa_jobs";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "name";
   COL_3_1_NAME : aliased constant String := "create_date";
   COL_4_1_NAME : aliased constant String := "start_date";
   COL_5_1_NAME : aliased constant String := "finish_date";
   COL_6_1_NAME : aliased constant String := "status";
   COL_7_1_NAME : aliased constant String := "server_id";
   COL_8_1_NAME : aliased constant String := "task_id";
   COL_9_1_NAME : aliased constant String := "parameters";
   COL_10_1_NAME : aliased constant String := "messages";
   COL_11_1_NAME : aliased constant String := "results";
   COL_12_1_NAME : aliased constant String := "user_id";
   COL_13_1_NAME : aliased constant String := "session_id";
   COL_14_1_NAME : aliased constant String := "queue_id";
   JOB_TABLE : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 15,
      Table => JOB_NAME'Access,
      Members => (
         COL_0_1_NAME'Access,
         COL_1_1_NAME'Access,
         COL_2_1_NAME'Access,
         COL_3_1_NAME'Access,
         COL_4_1_NAME'Access,
         COL_5_1_NAME'Access,
         COL_6_1_NAME'Access,
         COL_7_1_NAME'Access,
         COL_8_1_NAME'Access,
         COL_9_1_NAME'Access,
         COL_10_1_NAME'Access,
         COL_11_1_NAME'Access,
         COL_12_1_NAME'Access,
         COL_13_1_NAME'Access,
         COL_14_1_NAME'Access
)
     );
   Null_Job : constant Job_Ref
      := Job_Ref'(ADO.Objects.Object_Ref with others => <>);
   type Job_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => JOB_TABLE'Access)
   with record
       Version : Integer;
       Name : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Start_Date : ADO.Nullable_Time;
       Finish_Date : ADO.Nullable_Time;
       Status : Job_Status_Type;
       Server_Id : Integer;
       Task_Id : Integer;
       Parameters : Ada.Strings.Unbounded.Unbounded_String;
       Messages : Ada.Strings.Unbounded.Unbounded_String;
       Results : Ada.Strings.Unbounded.Unbounded_String;
       User : AWA.Users.Models.User_Ref;
       Session : AWA.Users.Models.Session_Ref;
       Queue : Queue_Ref;
   end record;
   type Job_Access is access all Job_Impl;
   overriding
   procedure Destroy (Object : access Job_Impl);
   overriding
   procedure Find (Object  : in out Job_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);
   overriding
   procedure Load (Object  : in out Job_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Job_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);
   overriding
   procedure Save (Object  : in out Job_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);
   procedure Create (Object  : in out Job_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   overriding
   procedure Delete (Object  : in out Job_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);
   procedure Set_Field (Object : in out Job_Ref'Class;
                        Impl   : out Job_Access);
end AWA.Jobs.Models;
