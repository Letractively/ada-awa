-----------------------------------------------------------------------
--  AWA.Blogs.Models -- AWA.Blogs.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2013 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
package body AWA.Blogs.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;

   function Blog_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => BLOG_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Blog_Key;

   function Blog_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => BLOG_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Blog_Key;

   function "=" (Left, Right : Blog_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Blog_Ref'Class;
                        Impl   : out Blog_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Blog_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Blog_Ref) is
      Impl : Blog_Access;
   begin
      Impl := new Blog_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Update_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Blog
   -- ----------------------------------------

   procedure Set_Id (Object : in out Blog_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Blog_Ref)
                  return ADO.Identifier is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Blog_Ref;
                        Value : in String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Blog_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Blog_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Blog_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   function Get_Version (Object : in Blog_Ref)
                  return Integer is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Uid (Object : in out Blog_Ref;
                       Value : in String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Uid, Value);
   end Set_Uid;

   procedure Set_Uid (Object : in out Blog_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Uid, Value);
   end Set_Uid;

   function Get_Uid (Object : in Blog_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Uid);
   end Get_Uid;
   function Get_Uid (Object : in Blog_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Uid;
   end Get_Uid;


   procedure Set_Create_Date (Object : in out Blog_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 5, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Blog_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Update_Date (Object : in out Blog_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 6, Impl.Update_Date, Value);
   end Set_Update_Date;

   function Get_Update_Date (Object : in Blog_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Update_Date;
   end Get_Update_Date;


   procedure Set_Url (Object : in out Blog_Ref;
                       Value : in String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 7, Impl.Url, Value);
   end Set_Url;

   procedure Set_Url (Object : in out Blog_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 7, Impl.Url, Value);
   end Set_Url;

   function Get_Url (Object : in Blog_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Url);
   end Get_Url;
   function Get_Url (Object : in Blog_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Url;
   end Get_Url;


   procedure Set_Workspace (Object : in out Blog_Ref;
                            Value  : in AWA.Workspaces.Models.Workspace_Ref'Class) is
      Impl : Blog_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 8, Impl.Workspace, Value);
   end Set_Workspace;

   function Get_Workspace (Object : in Blog_Ref)
                  return AWA.Workspaces.Models.Workspace_Ref'Class is
      Impl : constant Blog_Access
         := Blog_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Workspace;
   end Get_Workspace;

   --  Copy of the object.
   procedure Copy (Object : in Blog_Ref;
                   Into   : in out Blog_Ref) is
      Result : Blog_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Blog_Access
              := Blog_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Blog_Access
              := new Blog_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Version := Impl.Version;
            Copy.Uid := Impl.Uid;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Update_Date := Impl.Update_Date;
            Copy.Url := Impl.Url;
            Copy.Workspace := Impl.Workspace;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Blog_Access := new Blog_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Blog_Access := new Blog_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Blog_Access := new Blog_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Blog_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Blog_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Blog_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Blog_Impl) is
      type Blog_Impl_Ptr is access all Blog_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Blog_Impl, Blog_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Blog_Impl_Ptr := Blog_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, BLOG_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Blog_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (BLOG_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  uid
                          Value => Object.Uid);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  update_date
                          Value => Object.Update_Date);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  url
                          Value => Object.Url);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  workspace_id
                          Value => Object.Workspace);
         Object.Clear_Modified (8);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (BLOG_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_3_1_NAME, --  uid
                        Value => Object.Uid);
      Query.Save_Field (Name  => COL_4_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_5_1_NAME, --  update_date
                        Value => Object.Update_Date);
      Query.Save_Field (Name  => COL_6_1_NAME, --  url
                        Value => Object.Url);
      Query.Save_Field (Name  => COL_7_1_NAME, --  workspace_id
                        Value => Object.Workspace);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Blog_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (BLOG_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Blog_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Blog_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Blog_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "uid" then
         return Util.Beans.Objects.To_Object (Impl.Uid);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "update_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Update_Date);
      elsif Name = "url" then
         return Util.Beans.Objects.To_Object (Impl.Url);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   procedure List (Object  : in out Blog_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, BLOG_DEF'Access);
   begin
      Stmt.Execute;
      Blog_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Blog_Ref;
            Impl : constant Blog_Access := new Blog_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Blog_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Uid := Stmt.Get_Unbounded_String (3);
      Object.Create_Date := Stmt.Get_Time (4);
      Object.Update_Date := Stmt.Get_Time (5);
      Object.Url := Stmt.Get_Unbounded_String (6);
      if not Stmt.Is_Null (7) then
         Object.Workspace.Set_Key_Value (Stmt.Get_Identifier (7), Session);
      end if;
      Object.Version := Stmt.Get_Integer (2);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Post_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => POST_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Post_Key;

   function Post_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => POST_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Post_Key;

   function "=" (Left, Right : Post_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Post_Ref'Class;
                        Impl   : out Post_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Post_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Post_Ref) is
      Impl : Post_Access;
   begin
      Impl := new Post_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Version := 0;
      Impl.Publish_Date.Is_Null := True;
      Impl.Status := AWA.Blogs.Models.Post_Status_Type'First;
      Impl.Allow_Comments := False;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Post
   -- ----------------------------------------

   procedure Set_Id (Object : in out Post_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Post_Ref)
                  return ADO.Identifier is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Title (Object : in out Post_Ref;
                         Value : in String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Title, Value);
   end Set_Title;

   procedure Set_Title (Object : in out Post_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Title, Value);
   end Set_Title;

   function Get_Title (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Title);
   end Get_Title;
   function Get_Title (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Title;
   end Get_Title;


   procedure Set_Text (Object : in out Post_Ref;
                        Value : in String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Text, Value);
   end Set_Text;

   procedure Set_Text (Object : in out Post_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Text, Value);
   end Set_Text;

   function Get_Text (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Text);
   end Get_Text;
   function Get_Text (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Text;
   end Get_Text;


   procedure Set_Create_Date (Object : in out Post_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 4, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Post_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Uri (Object : in out Post_Ref;
                       Value : in String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 5, Impl.Uri, Value);
   end Set_Uri;

   procedure Set_Uri (Object : in out Post_Ref;
                      Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 5, Impl.Uri, Value);
   end Set_Uri;

   function Get_Uri (Object : in Post_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Uri);
   end Get_Uri;
   function Get_Uri (Object : in Post_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Uri;
   end Get_Uri;


   function Get_Version (Object : in Post_Ref)
                  return Integer is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Publish_Date (Object : in out Post_Ref;
                               Value  : in ADO.Nullable_Time) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Publish_Date, Value);
   end Set_Publish_Date;

   function Get_Publish_Date (Object : in Post_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Publish_Date;
   end Get_Publish_Date;


   procedure Set_Status (Object : in out Post_Ref;
                         Value  : in AWA.Blogs.Models.Post_Status_Type) is
      procedure Set_Field_Enum is
         new ADO.Objects.Set_Field_Operation (Post_Status_Type);
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Enum (Impl.all, 8, Impl.Status, Value);
   end Set_Status;

   function Get_Status (Object : in Post_Ref)
                  return AWA.Blogs.Models.Post_Status_Type is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Status;
   end Get_Status;


   procedure Set_Allow_Comments (Object : in out Post_Ref;
                                 Value  : in Boolean) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Boolean (Impl.all, 9, Impl.Allow_Comments, Value);
      ADO.Objects.Set_Field_Boolean (Impl.all, 9, Impl.Allow_Comments, Value);
   end Set_Allow_Comments;

   function Get_Allow_Comments (Object : in Post_Ref)
                  return Boolean is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Allow_Comments;
   end Get_Allow_Comments;


   procedure Set_Author (Object : in out Post_Ref;
                         Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.Author, Value);
   end Set_Author;

   function Get_Author (Object : in Post_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Author;
   end Get_Author;


   procedure Set_Blog (Object : in out Post_Ref;
                       Value  : in AWA.Blogs.Models.Blog_Ref'Class) is
      Impl : Post_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 11, Impl.Blog, Value);
   end Set_Blog;

   function Get_Blog (Object : in Post_Ref)
                  return AWA.Blogs.Models.Blog_Ref'Class is
      Impl : constant Post_Access
         := Post_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Blog;
   end Get_Blog;

   --  Copy of the object.
   procedure Copy (Object : in Post_Ref;
                   Into   : in out Post_Ref) is
      Result : Post_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Post_Access
              := Post_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Post_Access
              := new Post_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Title := Impl.Title;
            Copy.Text := Impl.Text;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Uri := Impl.Uri;
            Copy.Version := Impl.Version;
            Copy.Publish_Date := Impl.Publish_Date;
            Copy.Status := Impl.Status;
            Copy.Allow_Comments := Impl.Allow_Comments;
            Copy.Author := Impl.Author;
            Copy.Blog := Impl.Blog;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Post_Access := new Post_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Post_Access := new Post_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Post_Access := new Post_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Post_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Post_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Post_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Post_Impl) is
      type Post_Impl_Ptr is access all Post_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Post_Impl, Post_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Post_Impl_Ptr := Post_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, POST_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Post_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (POST_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  title
                          Value => Object.Title);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  text
                          Value => Object.Text);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  uri
                          Value => Object.Uri);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  publish_date
                          Value => Object.Publish_Date);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  status
                          Value => Integer (Post_Status_Type'Pos (Object.Status)));
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_2_NAME, --  allow_comments
                          Value => Object.Allow_Comments);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_2_NAME, --  author_id
                          Value => Object.Author);
         Object.Clear_Modified (10);
      end if;
      if Object.Is_Modified (11) then
         Stmt.Save_Field (Name  => COL_10_2_NAME, --  blog_id
                          Value => Object.Blog);
         Object.Clear_Modified (11);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (POST_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  title
                        Value => Object.Title);
      Query.Save_Field (Name  => COL_2_2_NAME, --  text
                        Value => Object.Text);
      Query.Save_Field (Name  => COL_3_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_4_2_NAME, --  uri
                        Value => Object.Uri);
      Query.Save_Field (Name  => COL_5_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_6_2_NAME, --  publish_date
                        Value => Object.Publish_Date);
      Query.Save_Field (Name  => COL_7_2_NAME, --  status
                        Value => Integer (Post_Status_Type'Pos (Object.Status)));
      Query.Save_Field (Name  => COL_8_2_NAME, --  allow_comments
                        Value => Object.Allow_Comments);
      Query.Save_Field (Name  => COL_9_2_NAME, --  author_id
                        Value => Object.Author);
      Query.Save_Field (Name  => COL_10_2_NAME, --  blog_id
                        Value => Object.Blog);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Post_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (POST_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Post_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Post_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Post_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (Impl.Title);
      elsif Name = "text" then
         return Util.Beans.Objects.To_Object (Impl.Text);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "uri" then
         return Util.Beans.Objects.To_Object (Impl.Uri);
      elsif Name = "publish_date" then
         if Impl.Publish_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Publish_Date.Value);
         end if;
      elsif Name = "status" then
         return Post_Status_Type_Objects.To_Object (Impl.Status);
      elsif Name = "allow_comments" then
         return Util.Beans.Objects.To_Object (Impl.Allow_Comments);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Post_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Title := Stmt.Get_Unbounded_String (1);
      Object.Text := Stmt.Get_Unbounded_String (2);
      Object.Create_Date := Stmt.Get_Time (3);
      Object.Uri := Stmt.Get_Unbounded_String (4);
      Object.Publish_Date := Stmt.Get_Time (6);
      Object.Status := Post_Status_Type'Val (Stmt.Get_Integer (7));
      Object.Allow_Comments := Stmt.Get_Boolean (8);
      Object.Allow_Comments := Stmt.Get_Boolean (8);
      if not Stmt.Is_Null (9) then
         Object.Author.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      if not Stmt.Is_Null (10) then
         Object.Blog.Set_Key_Value (Stmt.Get_Identifier (10), Session);
      end if;
      Object.Version := Stmt.Get_Integer (5);
      ADO.Objects.Set_Created (Object);
   end Load;


   --  --------------------
   --  Get the bean attribute identified by the given name.
   --  --------------------
   overriding
   function Get_Value (From : in Admin_Post_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      end if;
      if Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      end if;
      if Name = "uri" then
         return Util.Beans.Objects.To_Object (From.Uri);
      end if;
      if Name = "date" then
         return Util.Beans.Objects.Time.To_Object (From.Date);
      end if;
      if Name = "status" then
         return AWA.Blogs.Models.Post_Status_Type_Objects.To_Object (From.Status);
      end if;
      if Name = "username" then
         return Util.Beans.Objects.To_Object (From.Username);
      end if;
      if Name = "comment_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Comment_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Admin_Post_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;
   --  --------------------
   --  The Admin_Post_Info describes a post in the administration interface.
   --  --------------------
   procedure List (Object  : in out Admin_Post_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Admin_Post_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out Admin_Post_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Uri := Stmt.Get_Unbounded_String (2);
         Into.Date := Stmt.Get_Time (3);
         Into.Status := AWA.Blogs.Models.Post_Status_Type'Val (Stmt.Get_Integer (4));
         Into.Username := Stmt.Get_Unbounded_String (5);
         Into.Comment_Count := Stmt.Get_Natural (6);
      end Read;
   begin
      Stmt.Execute;
      Admin_Post_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   --  --------------------
   --  Get the bean attribute identified by the given name.
   --  --------------------
   overriding
   function Get_Value (From : in Blog_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      end if;
      if Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      end if;
      if Name = "uid" then
         return Util.Beans.Objects.To_Object (From.Uid);
      end if;
      if Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      end if;
      if Name = "post_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Post_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Blog_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;
   --  --------------------
   --  The list of blogs.
   --  --------------------
   procedure List (Object  : in out Blog_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Blog_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out Blog_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Uid := Stmt.Get_Unbounded_String (2);
         Into.Create_Date := Stmt.Get_Time (3);
         Into.Post_Count := Stmt.Get_Integer (4);
      end Read;
   begin
      Stmt.Execute;
      Blog_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   --  --------------------
   --  Get the bean attribute identified by the given name.
   --  --------------------
   overriding
   function Get_Value (From : in Comment_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      end if;
      if Name = "post_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Post_Id));
      end if;
      if Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      end if;
      if Name = "author" then
         return Util.Beans.Objects.To_Object (From.Author);
      end if;
      if Name = "email" then
         return Util.Beans.Objects.To_Object (From.Email);
      end if;
      if Name = "date" then
         return Util.Beans.Objects.Time.To_Object (From.Date);
      end if;
      if Name = "status" then
         return AWA.Comments.Models.Status_Type_Objects.To_Object (From.Status);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Comment_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;
   --  --------------------
   --  The comment information.
   --  --------------------
   procedure List (Object  : in out Comment_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Comment_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out Comment_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Post_Id := Stmt.Get_Identifier (1);
         Into.Title := Stmt.Get_Unbounded_String (2);
         Into.Author := Stmt.Get_Unbounded_String (3);
         Into.Email := Stmt.Get_Unbounded_String (4);
         Into.Date := Stmt.Get_Time (5);
         Into.Status := AWA.Comments.Models.Status_Type'Val (Stmt.Get_Integer (6));
      end Read;
   begin
      Stmt.Execute;
      Comment_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   --  --------------------
   --  Get the bean attribute identified by the given name.
   --  --------------------
   overriding
   function Get_Value (From : in Post_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      end if;
      if Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      end if;
      if Name = "uri" then
         return Util.Beans.Objects.To_Object (From.Uri);
      end if;
      if Name = "date" then
         return Util.Beans.Objects.Time.To_Object (From.Date);
      end if;
      if Name = "username" then
         return Util.Beans.Objects.To_Object (From.Username);
      end if;
      if Name = "text" then
         return Util.Beans.Objects.To_Object (From.Text);
      end if;
      if Name = "comment_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Comment_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;

   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Post_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;
   --  --------------------
   --  The Post_Info describes a post to be displayed in the blog page
   --  --------------------
   procedure List (Object  : in out Post_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Post_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out Post_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Uri := Stmt.Get_Unbounded_String (2);
         Into.Date := Stmt.Get_Time (3);
         Into.Username := Stmt.Get_Unbounded_String (4);
         Into.Text := Stmt.Get_Unbounded_String (5);
         Into.Comment_Count := Stmt.Get_Natural (6);
      end Read;
   begin
      Stmt.Execute;
      Post_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   procedure Op_Create (Bean    : in out Blog_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Create (Bean    : in out Blog_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Blog_Bean'Class (Bean).Create (Outcome);
   end Op_Create;
   package Binding_Blog_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Blog_Bean,
                                                      Method => Op_Create,
                                                      Name   => "create");

   Binding_Blog_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Blog_Bean_1.Proxy'Access
     );

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Blog_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
   begin
      return Binding_Blog_Bean_Array'Access;
   end Get_Method_Bindings;


   --  Set the value identified by the name
   overriding 
   procedure Set_Value (Item  : in out Blog_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      null;
   end Set_Value;



   procedure Op_Save (Bean    : in out Post_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Post_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Post_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Post_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Post_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Delete (Bean    : in out Post_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Delete (Bean    : in out Post_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Post_Bean'Class (Bean).Delete (Outcome);
   end Op_Delete;
   package Binding_Post_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Post_Bean,
                                                      Method => Op_Delete,
                                                      Name   => "delete");
   procedure Op_Load (Bean    : in out Post_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Post_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Post_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Post_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Post_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Post_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Post_Bean_1.Proxy'Access,
         2 => Binding_Post_Bean_2.Proxy'Access,
         3 => Binding_Post_Bean_3.Proxy'Access
     );

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Post_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
   begin
      return Binding_Post_Bean_Array'Access;
   end Get_Method_Bindings;


   --  Set the value identified by the name
   overriding 
   procedure Set_Value (Item  : in out Post_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      null;
   end Set_Value;




end AWA.Blogs.Models;
