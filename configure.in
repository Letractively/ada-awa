dnl Autoconf configure script for AWA
dnl Copyright 2011 
dnl

AC_INIT(support/build.config.in)

AC_CANONICAL_SYSTEM
AC_EXEEXT

# Current release settings
AWA_MAJOR_VERSION=1
AWA_MINOR_VERSION=0
AWA_MICRO_VERSION=0
AWA_VERSION=$AWA_MAJOR_VERSION.$AWA_MINOR_VERSION.$AWA_MICRO_VERSION

AWA_PACKAGES="ada-util-1.7.1 ada-el-1.5.1 ada-security-1.1.1 ada-asf-1.0.1 ada-ado-1.0.1 ada-awa-1.0.0 dynamo-0.7.1"

# checking for local tools
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB

# Set the version number of GtkAda
AC_SUBST(AWA_VERSION)
AC_SUBST(AWA_MAJOR_VERSION)
AC_SUBST(AWA_MINOR_VERSION)
AC_SUBST(AWA_MICRO_VERSION)

EXEC_PREFIX="$prefix"
AC_SUBST(EXEC_PREFIX)

PACKAGES="$AWA_PACKAGES"

ac_enable_ahven=no
AC_ARG_ENABLE(ahven,
[  --enable-ahven          Enable internal Ahven support for testutil library and Ada util unit tests (disabled)],
[case "${enableval}" in
  no|none)  ac_enable_ahven= ;;
  *)        ac_enable_ahven=yes
            ac_enable_aunit=no ;;
esac])dnl

AC_ARG_ENABLE(aunit,
[  --enable-aunit          build AUnit provided by AWA],
ENABLE_AUNIT=$enableval,
ENABLE_AUNIT=no)

AC_ARG_ENABLE(xmlada,
[  --enable-xmlada         build XML/Ada provided by AWA],
ENABLE_XMLADA=$enableval,
ENABLE_XMLADA=no)

AC_ARG_ENABLE(aws,
[  --enable-aws            build AWS provided by AWA],
ENABLE_AWS=$enableval,
ENABLE_AWS=no)

if test $ENABLE_AUNIT = "yes" ; then
  PACKAGES="$PACKAGES aunit-gpl-2011-src"
fi

if test $ENABLE_XMLADA = "yes" ; then
  PACKAGES="$PACKAGES xmlada-gpl-4.1-src"
fi

if test $ENABLE_AWS = "yes" ; then
  PACKAGES="$PACKAGES aws-gpl-3.1.0-src"
fi

dnl Extract the packages if necessary
dnl - AWS, AUnit, XML/Ada are provided in 'external' directory
dnl - AWA packages are located in 'dist'
for NAME in $PACKAGES ; do
   TGZ=$NAME.tar.gz
   DIR=$NAME
   case $NAME in
      xmlada-gpl-4.1-src)
        DIR=xmlada-4.1-src
        TARGET=xmlada
	TGZ=$NAME.tgz
        ;;

      aunit-*)
        TARGET=aunit
	TGZ=$NAME.tgz
        ;;

      aws-*)
        TARGET=aws
	TGZ=$NAME.tgz
        ;;

      ada-util-*)
        TARGET=util
        ;;

      ada-el-*)
        TARGET=el
        ;;

      ada-asf-*)
        TARGET=asf
        ;;

      ada-security-*)
        TARGET=security
        ;;

      ada-ado-*)
        TARGET=ado
        ;;

      ada-awa-*)
        TARGET=awa
        ;;

      dynamo-*)
        TARGET=dynamo
        ;;

      *)
        TARGET=$NAME
        ;;
   esac
   if test -f distrib/$TGZ ; then
      TGZ="distrib/$TGZ"
   else
      if test -f external/$TARGET/$TGZ ; then
         TGZ="external/$TARGET/$TGZ"
      fi
   fi
   dnl Do nothing if the target directory exist
   if test -d $TARGET ; then
      echo "Package $NAME already extracted."
   else
      if test -d $DIR ; then
         echo "Package $NAME already extracted."
      else
         echo "Extracting $TGZ"
         tar xzf $TGZ
      fi
      mv $DIR $TARGET
   fi
done

DIR=`pwd`
NEED_INSTALL=""

##########################################
# Check for XML Ada
##########################################

XMLADA_DIR=

AC_MSG_CHECKING([XML/Ada library (http://libre.adacore.com/libre/tools/xmlada/)])
AC_ARG_WITH(xmlada,
  AS_HELP_STRING([--with-xmlada=x], [Path for the XML/Ada library (http://libre.adacore.com/libre/tools/xmlada/)]),
[
  WITH_SERVER="with \"${withval}\";";
  XMLADA_DIR=${withval}/
],
[
  echo "with \"xmlada\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    XMLADA_DIR=
  else
    XMLADA_DIR=../xmlada/
  fi;
  rm -f t.gpr
])
echo "with \"${XMLADA_DIR}xmlada\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_RESULT(Not found)

   if test $ENABLE_XMLADA != "yes" ; then
      AC_MSG_ERROR([XML/Ada library not found and --enable-xmlada not specified])
   fi
   echo "Configuring ==== xmlada ===="
   (cd $DIR/xmlada && ./configure --prefix="$prefix")
   NEED_INSTALL="$NEED_INSTALL xmlada"

   XMLADA_DIR=
else
   WITH_SERVER="with \"${XMLADA_DIR}xmlada\";";
   AC_MSG_RESULT(yes ${XMLADA_DIR})
fi
rm -f t.gpr

##########################################
# Check for Ada Web Server
##########################################

AWS_DIR=

AC_MSG_CHECKING([Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)])
AC_ARG_WITH(aws,
  AS_HELP_STRING([--with-aws=x], [Path for the Ada Web Server library (http://libre.adacore.com/libre/tools/aws/)]),
[
  WITH_SERVER="with \"${withval}\";";
  AWS_DIR=${withval}/
],
[
  echo "with \"aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    AWS_DIR=
  else
    AWS_DIR=../aws/
  fi;
  rm -f t.gpr
])
echo "with \"${AWS_DIR}aws\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_RESULT(Not found)

   if test $ENABLE_AWS != "yes" ; then
      AC_MSG_ERROR([Ada Web Server not found and --enable-aws not specified])
   fi

   NEED_AWS_PATCH=1
   echo "Configuring ==== aws ===="
   (cd $DIR/aws;
         cp makefile.conf makefile.conf.orig
         sed -e 's,^SOCKET.*=.*,SOCKET=openssl,' \
             -e 's,^IPv6.*=.*,IPv6=true,' < makefile.conf.orig > makefile.conf
         if test $NEED_AWS_PATCH -eq 1 ; then
            # Fix builder switches (others) does not seem to be recognized by gprbuild
            cp tools/tools.gpr tools/tools.gpr.orig
            sed -e 's,(others),("Ada"),g' < tools/tools.gpr.orig > tools/tools.gpr

            # Remove -B option which is not supported by gcc 4.4
            cp shared.gpr shared.gpr.orig
            sed -e 's,gnaty3abBcefhiIklmnoprstx,gnaty3abcefhiIklmnoprstx,' < shared.gpr.orig > shared.gpr
         fi
         make prefix="$prefix" setup
      )
   NEED_INSTALL="$NEED_INSTALL aws"

   AWS_DIR=
else
   WITH_SERVER="with \"${AWS_DIR}aws\";";
   AC_MSG_RESULT(yes ${AWS_DIR})
fi
rm -f t.gpr

if test T"$NEED_INSTALL" != T; then
   AC_MSG_RESULT(The following packages have been configured: ${NEED_INSTALL})
   AC_MSG_RESULT(You must compile and install them before configuring other packages.)
   AC_MSG_RESULT(Suggested commands:)
   AC_MSG_RESULT(  (cd xmlada && make && make install))
   AC_MSG_RESULT(  (cd aws && make prefix="$prefix" setup build install))
   exit 0
fi

ARGS="--prefix $prefix"

echo "Configuring ==== ada-util ===="
(cd $DIR/util && ./configure $ARGS --enable-ahven)

echo "Configuring ==== ada-el ===="
(cd $DIR/el && ./configure --with-ada-util=../util $ARGS)

echo "Configuring ==== ada-security ===="
(cd $DIR/security && ./configure --with-ada-util=../util $ARGS)

echo "Configuring ==== ada-asf ===="
(cd $DIR/asf && ./configure --with-ada-util=../util --with-ada-el=../el --with-ada-security=../security $ARGS)

echo "Configuring ==== ada-ado ===="
(cd $DIR/ado && ./configure --with-ada-util=../util $ARGS)

echo "Configuring ==== dynamo ===="
(cd $DIR/dynamo && ./configure --with-ada-util=../util --with-ada-el=../el --with-ada-asf=../asf --with-ada-ado=../ado $ARGS)

echo "Configuring ==== ada-awa ===="
(cd $DIR/awa && ./configure --with-ada-util=../util --with-ada-el=../el --with-ada-asf=../asf --with-ada-security=../security --with-ada-ado=../ado $ARGS)

AC_OUTPUT(
Makefile support/build.config
)
