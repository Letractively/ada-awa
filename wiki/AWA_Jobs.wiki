#summary AWA Jobs

== Introduction ==
The <b>AWA.Jobs</b> plugin defines a batch job framework for modules to perform and execute
long running and deferred actions.  The `Jobs` plugin is intended to help web application
designers in implementing end to end asynchronous operation.  A client schedules a job
and does not block nor wait for the immediate completion.  Instead, the client asks
periodically or uses other mechanisms to check for the job completion.

=== Writing a job ===
A new job type is created by implementing the `Execute` operation of the abstract
`Job_Type` tagged record.

{{{
  type Resize_Job is new AWA.Jobs.Job_Type with ...;
}}}

The `Execute` procedure must be implemented.  It should use the `Get_Parameter` functions
to retrieve the job parameters and perform the work.  While the job is being executed,
it can save result by using the `Set_Result` operations, save messages by using the
`Set_Message` operations and report the progress by using `Set_Progress`.
It may report the job status by using `Set_Status`.

{{{
  procedure Execute (Job : in out Resize_Job) is
  begin
      Job.Set_Result ("done", "ok");
  end Execute;
}}}

=== Registering a job ===
The <b>AWA.Jobs</b> plugin must be able to create the job instance when it is going to
be executed.  For this, a registration package must be instantiated:

{{{
  package Resize_Def is new AWA.Jobs.Definition (Resize_Job);
}}}

and the job definition must be added:

{{{
  AWA.Jobs.Modules.Register (Resize_Def.Create'Access);
}}}

=== Scheduling a job ===
To schedule a job, declare an instance of the job to execute and set the job specific
parameters.  The job parameters will be saved in the database.  As soon as parameters
are defined, call the `Schedule` procedure to schedule the job in the job queue and
obtain a job identifier.

{{{
  Resize : Resize_Job;
  ...
  Resize.Set_Parameter ("file", "image.png");
  Resize.Set_Parameter ("width", "32");
  Resize.Set_Parameter ("height, "32");
  Resize.Schedule;
}}}

=== Checking for job completion ===


== Job Module ==
The <b>Jobs.Modules</b> is the entry point for the management of asynchronous jobs.
It maintains a list of job types that can be executed for the application and it
manages the job dispatchers.

== Data Model ==
<h4>AWA.Jobs.Models.Job</h4><p>The jobs table.</p><table width="100%">
<tr>
<th width="15%" align="left">Type</th>
<th width="15%" align="left">Ada</th>
<th width="20%" align="left">Name</th>
<th width="50%" align="left">Description</th>
</tr>
<tr>
<td>BIGINT</td>
<td>ADO.Identifier</td>
<td>id</td>
<td>the jobs id</td>
</tr>
<tr>
<td>int</td>
<td></td>
<td>version</td>
<td>the jobs version</td>
</tr>
<tr>
<td>VARCHAR(256)</td>
<td>String</td>
<td>name</td>
<td>the jobs name</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>create_date</td>
<td>the jobs creation date</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>start_date</td>
<td>the jobs start date</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>finish_date</td>
<td>the jobs finish date</td>
</tr>
<tr>
<td>INTEGER</td>
<td></td>
<td>status</td>
<td>the job status</td>
</tr>
<tr>
<td>TEXT</td>
<td>String</td>
<td>messages</td>
<td>the job messages</td>
</tr>
<tr>
<td>TEXT</td>
<td>String</td>
<td>results</td>
<td>the job results</td>
</tr>
<tr>
<td>INTEGER</td>
<td>AWA.Users.Models.User</td>
<td>user_id</td>
<td>the user who triggered the job</td>
</tr>
<tr>
<td>INTEGER</td>
<td>AWA.Users.Models.Session</td>
<td>session_id</td>
<td>the user session who triggered the job</td>
</tr>
<tr>
<td>INTEGER</td>
<td>AWA.Events.Models.Message</td>
<td>event_id</td>
<td>the message creation event associated with this job</td>
</tr>
</table>





----
[http://code.google.com/p/ada-gen Generated by Dynamo] _from awa-jobs.ads_
