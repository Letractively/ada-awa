#summary AWA Events

== Introduction ==
The <b>AWA.Events</b> package defines an event framework for modules to post events
and have Ada bean methods be invoked when these events are dispatched.  Subscription to
events is done through configuration files.  This allows to configure the modules and
integrate them together easily at configuration time.

=== Declaration ===
Modules define the events that they can generate by instantiating the <b>Definition</b>
package. This is a static definition of the event.  Each event is given a unique name.

{{{
  package Event_New_User is new AWA.Events.Definition ("new-user");
}}}

=== Posting an event ===
The module can post an event to inform other modules or the system that a particular
action occurred.  The module creates the event instance of type <b>Module_Event</b> and
populates that event with useful properties for event receivers.

{{{
  Event : AWA.Events.Module_Event;
  Event.Set_Event_Kind (Event_New_User.Kind);
  Event.Set_Parameter ("email", "harry.potter@hogwarts.org");

}}}

The module will post the event by using the <b>Send_Event</b> operation.

{{{
  Manager.Send_Event (Event);
}}}

=== Receiving an event ===
Modules or applications interested by a particular event will configure the event manager
to dispatch the event to an Ada bean event action.  The Ada bean is an object that must
implement a procedure that matches the prototype:

{{{
  type Action_Bean is new Util.Beans.Basic.Readonly_Bean ...;
  procedure Action (Bean : in out Action_Bean; Event : in AWA.Events.Module_Event'Class);
}}}

The Ada bean method and object are registered as other Ada beans.

The configuration file indicates how to bind the Ada bean action and the event together.
The action is specified using an EL Method Expression (See Ada EL or JSR 245).

{{{
  <on-event name="new_user">
      <action>#{ada_bean.action}</action>
  </on-event>
}}}

=== Event queues and dispatchers ===
The *AWA.Events* framework posts events on queues and it uses a dispatcher to process them.
There are two kinds of dispatchers:

  * Synchronous dispatcher process the event when it is posted.  The task which posts    the event invokes the Ada bean action.  In this dispatching mode, there is no event queue.    If the action method raises an exception, it will however be blocked.

  * Asynchronous dispatcher are executed by dedicated tasks.  The event is put in an event    queue.  A dispatcher task processes the event and invokes the action method at a later    time.

When the event is queued, there are two types of event queues:

  * A Fifo memory queue manages the event and dispatches them in FIFO order.    If the application is stopped, the events present in the Fifo queue are lost.

  * A persistent event queue manages the event in a similar way as the FIFO queue but    saves them in the database.  If the application is stopped, events that have not yet    been processed will be dispatched when the application is started again.

== Data Model ==
<h4>AWA.Events.Models.Queue</h4><p>A message queue</p><table width="100%">
<tr>
<th width="15%" align="left">Type</th>
<th width="15%" align="left">Ada</th>
<th width="20%" align="left">Name</th>
<th width="50%" align="left">Description</th>
</tr>
<tr>
<td>INTEGER</td>
<td>ADO.Identifier</td>
<td>id</td>
<td>the queue identifier</td>
</tr>
<tr>
<td>int</td>
<td></td>
<td>version</td>
<td>the event queue version.</td>
</tr>
<tr>
<td>VARCHAR(256)</td>
<td>String</td>
<td>name</td>
<td>the message queue name</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Integer</td>
<td>server_id</td>
<td>the server identifier which is associated with this message queue</td>
</tr>
</table>

<h4>AWA.Events.Models.Message_Type</h4><p>A message type</p><table width="100%">
<tr>
<th width="15%" align="left">Type</th>
<th width="15%" align="left">Ada</th>
<th width="20%" align="left">Name</th>
<th width="50%" align="left">Description</th>
</tr>
<tr>
<td>INTEGER</td>
<td>ADO.Identifier</td>
<td>id</td>
<td>the message type identifier</td>
</tr>
<tr>
<td>VARCHAR(256)</td>
<td>String</td>
<td>name</td>
<td>the message type name</td>
</tr>
</table>

<h4>AWA.Events.Models.Message</h4><p>A message in the message queue</p><table width="100%">
<tr>
<th width="15%" align="left">Type</th>
<th width="15%" align="left">Ada</th>
<th width="20%" align="left">Name</th>
<th width="50%" align="left">Description</th>
</tr>
<tr>
<td>BIGINT</td>
<td>ADO.Identifier</td>
<td>id</td>
<td>the message identifier</td>
</tr>
<tr>
<td>int</td>
<td></td>
<td>version</td>
<td>the message version.</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Integer</td>
<td>priority</td>
<td>the message priority</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Integer</td>
<td>server_id</td>
<td>the server which is processing this message</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Integer</td>
<td>task_id</td>
<td>the task within the server which is processing this message</td>
</tr>
<tr>
<td>VARCHAR(60000)</td>
<td>String</td>
<td>parameters</td>
<td>the message parameters</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>create_date</td>
<td>the message creation date</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>processing_date</td>
<td>the message processing date</td>
</tr>
<tr>
<td>DATETIME</td>
<td></td>
<td>finish_date</td>
<td>the message end processing date</td>
</tr>
<tr>
<td>INTEGER</td>
<td></td>
<td>status</td>
<td>the message status</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Message_Type</td>
<td>type</td>
<td>the message type</td>
</tr>
<tr>
<td>INTEGER</td>
<td>AWA.Users.Models.User</td>
<td>user_id</td>
<td>the user who triggered the message</td>
</tr>
<tr>
<td>INTEGER</td>
<td>AWA.Users.Models.Session</td>
<td>session_id</td>
<td>the user session who triggered the message</td>
</tr>
<tr>
<td>INTEGER</td>
<td>Queue</td>
<td>queue_id</td>
<td>the message queue associated with this message</td>
</tr>
</table>





----
[http://code.google.com/p/ada-gen Generated by Dynamo] _from awa-events.ads_
